I might throw up some Notes from GlassDoor and other interviews on kind of potpourri development cycles and principles tasks. Object Oriented Programming and stuff like interviews preparation Notes. I have a ton of books on these topics to skim and memorise mem before interviews on top of like the GlassDoor tasks so we shall see here maybe soon for the brothers out there need some tips and help... this again comes right back into not trusting any book is actually even bare minimum half decent for example in Cracking The Coding Interview which is like kind of hot garbage trash fire but has some OK content say task 1.7 the proposed solution one wonders if this is canonical but it is clearly suboptimal from a pruning perspective one would think that there may exist a much faster way to avoid this for example in the case that the first row and first column are all 0s we would like to halt there and be done rather than searching the whole matrix first. So for example immediately after this first row and column one can in fact simply prune out the joint intersection and then uh just like do this again maybe each row or column iteration or whatever and we may even be able to process in nearly optimal order supposing the underlying is uniform with respect to P[being 0] or whatever and tune this one out optimally. Think if hash maps or which vectors what way can obviously simply do the break down into 2 rectangles to loop over and ignore the other rectangle in the most naive way if we store those vectors but like ideally we want to not ever be wasting time examining or doing lookups or pre lookups on already ruled out dudes if possible. Take pride in pursuing optimal optimisations and perfectionism where desired in programming radical visionary genius codebases.

These books are actually fascinating and novel to me and I might start taking public Notes on C and C++ codes and codebases on Github related to trading and algorithmic high frequency trading if possible.

Yikes in fact there is a massive corpus which I guess has a quantitatively large amount of content that some Software Engineers do comprehend somewhat so I better get around to understanding all of it! Yay!

Might line up some nice The Sequences of books here shortly for skims:
Object Oriented Programming Languages: Interpretation - Iain D. Craig
Principles Of Data Mining - Max Bramer
Semantics With Applications: An Appetizer - Hanne Riis Nielson And Flemming Nielson