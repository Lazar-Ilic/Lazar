This document contains a few sketches of ideas I would consider using if doing a writeup or teaching a course on this topic.

Inspired by UT Austin Putnam: show a graphic say of the line y=x and the curve y=x^3/100 zoomed in with a numeric label on the x-axis and ask if and where these curves intersect so that some people's surprise at just how low the x-value of intersection truly is stick in their mind for a while. Show x=0 to x=1 they might guess 1000 not the true value 10. And they better understand asymptotic blowup and maybe get a real feeling that this matters somehow. And the other point to make is that further optimisations, prunings, efficiency are important and one way to emphasize this is to stress that a simple temporal analysis reveals many students spend years of their lives on tasks such as showering! Maybe also talk about the process of iterating and improving. If you make a ton of little insights which impact the base or rate of an exponential growth process, the end result is catastrophic. You find yourself in an apartment after 100 hours of optimisation and cannot even begin to imagine or comprehend just how bad you had it physically and biologically before you updated and made those changes and you are feeling so good and it can only get better from there you hope.

Inspired by Andrew Critch at Summer Program On Applied Rationality And Cognition: more interactives like one might find in a proprietary trading firm interview setting. Observations of bits, integers, or real numbers and discussions of learning. Actual multi armed bandit task. Some kids don't really care about optimisation, don't feel a visceral desire to optimise everything, or care about acing tasks, but reward maximisation is something many people do care about quite intuitively. There is a sense in which it is about doing tasks, about wanting to do a task. So it might follow that good pedagogy would involve tasks where one has to produce an asymptotically optimal implementation and execute it for 15 minutes in order to obtain credit. Have kiddos really confront that their code simply will not do the task at hand.

I would avoid all names and things and would hope people see the structure in the structure perhaps discuss the so called "Knapsack Problem" in the unit on constrained integer linear programming simplex where this is a mere example and at that point discuss greedy approximation algorithms and the canonical dynamic program for low input cases. So many names can boggle people down but the mathematics are what is important and the actual tasks. That is why I have files titled "isprime" which tell me when a number is prime: it's very useful, easy to use, low cognitive overhead, etc.

Inspired By IBM Research Ponder This October 2021 Task: assign a puzzle which is very tricky to execute programatically and in fact can be done manually in say <60 minutes. This is instructive both on doing tasks and intractability. These sorts of tasks exist in reality and one ought to be prepared to handle them appropriately.

Inspired By Project Euler Task: a task where an instant Fermi estimate implies that a naive brute force will work.

I would probably cover a ton of proprietary trading firms' interviews tasks which cut to the heart of the matters and the key ideas.

Verification and "I will believe it when I see it". Thinking "does that person really functionally know that thing?" Representations of knowledge and the informational asymmetry of interviews.

There exist many humans who, prior to learning how to code, could on sight strictly dominating generalisations of tasks others think are tricky. And there exist many for whom graduate computer science courses tasks are also very trivial. Competitive programming gets in to the serious study of latency, on sighting terse implementations, and also a bit of the so called "art of [competitive] programming" which some in academia lack. Some fail to appreciate the sub liminal nuances of winning that particular award. If 25 Eulerians all on sight some maths structure, then the leaderboard comes down to programming. And there is learning and ongoing educational value in regularly being in that crew, and in the <12 hour solve time gang, and in the eventually figure it out later or not squad. But a firm may care more about one's ability to write up helpful technical documentation in code so that such writing is much more useful to a future human.

This is itself a very serious topic for academics as well as people trying to impress others with their writing. It is one thing to solve an IBM Research Ponder This puzzle in 2 minutes flat and know that this credential is rare, but another to try and optimise and provide the reader with an elucidating, entertaining, and gently educational recalling experience. Nudge the words around the right way in the reader's mind and they will think you are in fact a cool dude who can exposit. Aspire to maximising information transfer, and imagine the reader is lowkey buzzed and does not really care all that much. Be emphatic! Crystal clear, 0 ambiguity! Sculpt and craft the easy optimised information transfer reading experience! The more sharp maths, follow on comments, and further reading literature references, the better.

Hobbies change and mine changes from low latency puzzle solving to low latency puzzle solving plus trying to get better at fun little writeups which is in fact a very different hobby and one some people think is much cooler for they can now engage with it a little bit.

I'm supposed to write down that sort of thing on a LinkedIn biography, stuff like "visceral desire to optimise". I live and breathe algorithms and it is flowing through my veins everything all of the time here I'm alive or whatever. And the passion and viscerality with which it is flowing is itself visceral and so on and so on... It is apparently what makes Silicon Valley and New York City recruiters sometimes choose to take notice moreso than actually being performant at doing tasks. Maybe the firms don't think that winning at the mind sport has to do with winning at the mind sport of the markets... or maybe I need to write "passionate" [implicitly for work rather than explicitly]. I will read Heard On The Street Volumes 1-1000 if that's what it takes. I will work 18 hours per day. They are supposed to understand that I have become performant across a variety of domains, a jack of some trades if you will. And infer that I will become good at work. Alas.

In any case if one wants to target IBM Research, Microsoft Research, etc. be a quantitative researcher one ought to demonstrate ability to do the task, skill of executing quantitative research and take maths in to the new directions.

One can create a public timestamped writing and code corpus which contains vast amounts of computer science content. It is profoundly different to have the technical skill of consistently producing output in real world problem solving settings. Versus completing 1 short homework assignment with the literal title "amortised analysis" in 1 extremely easy university course. This is why some firms prefer undergraduates who do competitions over those who make the choice to select the "BS Computer Science" major [which one soon sees as comparable to a certificate e.g. a ~0 value piece of paper], execute that sequence of tasks, and obtain that piece of paper with those As. It varies firm to firm, whether or not one's corpus will be properly vetted and evaluated, and some kids who do maths contests might assume that 0.95 of people in trading know what "Putnam Honourable Mention" means when the reality is that value may be closer to 0.15.
