def f(a):
	if a%2==0:
		b=f(a//2)
		for dude in b:
			dude[0]+=1
		return b
	else:
		b=1
		c=0
		while 3*b<=a:
			b*=3
			c+=1
		if b==a:
			return [[0,c]]
		else:
			d=f((a-b)//2)
			for dude in d:
				dude[0]+=1
			d.append([0,c])
			return d
print(10**199)
print(f(10**199))
print(10**299)
print(f(10**299))

# 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# [(442, 0), (440, 1), (438, 4), (437, 5), (436, 6), (431, 12), (429, 14), (422, 19), (419, 22), (416, 24), (415, 25), (414, 26), (413, 27), (409, 30), (405, 36), (402, 38), (399, 40), (396, 43), (395, 46), (394, 48), (393, 53), (392, 54), (388, 57), (385, 59), (384, 61), (383, 62), (382, 65), (379, 67), (378, 70), (377, 71), (376, 72), (373, 75), (372, 76), (371, 77), (370, 78), (369, 80), (366, 82), (364, 84), (363, 86), (360, 88), (359, 89), (358, 90), (356, 93), (355, 96), (354, 99), (353, 101), (351, 103), (349, 105), (347, 107), (344, 109), (342, 113), (341, 115), (340, 116), (339, 119), (336, 121), (335, 123), (333, 124), (332, 128), (331, 131), (328, 135), (325, 137), (322, 141), (320, 142), (319, 145), (318, 146), (315, 149), (313, 153), (310, 156), (309, 158), (308, 160), (307, 161), (303, 164), (302, 165), (300, 168), (299, 169), (297, 171), (296, 172), (294, 175), (293, 177), (288, 183), (284, 185), (283, 188), (282, 189), (281, 190), (279, 192), (278, 193), (277, 195), (276, 197), (274, 199), (269, 204), (267, 205), (266, 206), (262, 212), (255, 216), (254, 217), (253, 218), (252, 222), (251, 224), (250, 225), (248, 228), (246, 230), (243, 237), (241, 241), (240, 243), (239, 246), (235, 249), (234, 250), (233, 252), (232, 253), (230, 255), (228, 258), (226, 263), (223, 265), (220, 267), (218, 269), (216, 272), (214, 274), (213, 277), (212, 278), (211, 279), (208, 281), (207, 283), (206, 284), (200, 290), (199, 291)]
# 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# [(682, 0), (680, 1), (677, 4), (676, 5), (673, 7), (671, 13), (669, 15), (663, 19), (662, 20), (661, 22), (657, 25), (656, 26), (655, 28), (654, 29), (653, 30), (651, 34), (650, 36), (648, 37), (647, 39), (646, 40), (644, 42), (643, 47), (641, 48), (640, 49), (639, 50), (637, 52), (636, 53), (634, 56), (633, 59), (632, 62), (629, 64), (627, 67), (626, 69), (625, 70), (624, 72), (623, 73), (622, 78), (619, 82), (616, 86), (614, 87), (612, 91), (610, 93), (609, 94), (608, 96), (607, 97), (605, 102), (603, 107), (599, 109), (593, 114), (589, 118), (587, 119), (583, 123), (582, 125), (580, 127), (574, 132), (572, 135), (570, 136), (569, 137), (568, 138), (564, 141), (560, 145), (558, 147), (555, 149), (553, 151), (550, 153), (549, 157), (548, 159), (546, 162), (544, 163), (542, 165), (538, 169), (537, 170), (533, 173), (532, 175), (529, 177), (528, 182), (526, 184), (524, 185), (523, 186), (522, 187), (521, 189), (520, 190), (516, 193), (515, 194), (514, 195), (511, 198), (509, 200), (508, 201), (505, 203), (504, 204), (503, 209), (502, 210), (500, 214), (498, 216), (497, 217), (493, 220), (492, 221), (490, 223), (487, 225), (486, 226), (484, 228), (483, 230), (480, 232), (477, 235), (473, 241), (472, 243), (471, 244), (470, 245), (469, 247), (467, 248), (465, 253), (460, 256), (459, 257), (458, 258), (457, 259), (456, 262), (455, 265), (453, 267), (448, 271), (443, 275), (442, 276), (441, 278), (438, 280), (434, 284), (432, 286), (431, 287), (430, 288), (429, 290), (428, 291), (427, 292), (426, 293), (425, 294), (421, 297), (420, 298), (417, 304), (415, 305), (414, 306), (413, 307), (409, 310), (407, 312), (406, 313), (404, 316), (403, 317), (402, 319), (400, 320), (399, 321), (397, 323), (396, 325), (390, 330), (387, 332), (386, 333), (382, 336), (381, 337), (380, 339), (379, 342), (377, 343), (376, 346), (375, 348), (374, 349), (371, 352), (368, 355), (366, 356), (365, 358), (362, 360), (361, 361), (358, 364), (355, 366), (354, 368), (353, 369), (352, 370), (351, 371), (349, 373), (347, 375), (345, 378), (344, 380), (343, 383), (342, 387), (340, 389), (338, 391), (337, 392), (334, 395), (333, 397), (331, 400), (329, 402), (324, 405), (323, 406), (322, 408), (319, 410), (314, 414), (313, 416), (312, 417), (311, 419), (308, 422), (306, 423), (305, 426), (304, 427), (303, 430), (302, 432), (301, 433), (299, 438)]

# I was not sure if the values 10^199 and 10^299 would produce the target length under the threshold but they did! And thus an implementation of an Erdos observation, from the Kedlaya archive solution for the Putnam 2005 A1, was born! It's a recursion which can be analysed either by simply plugging the recursion equation into WolframAlpha or what is known as the Master Theorem. So for example WolframAlpha Implementation:

# f(x)=log(x)+f(x/2)

# This returns that this algorithm is O[log^2 n]. In any case, if a is even we simply multiply all summands in a representation for a/2 by 2. If a is odd we append the maximal b relevant power of 3 to the list for (a-b)/2 multiplied by 2.