# https://oeis.org/A360030
# Could go modify or ask Gadi and Hugo to do so afterwards with rigourous proof on top of the codes.
# This part here is lightly modified ChatGPT output.
# ChatGPT produced many interesting engouh outputs which reference "import networkx" so I decided to go ahead and review some notes on some graph algorithms related to enumeration and think about maybe using one of those libraries for tasks like this in the future or pinging it and Google asking for more different options for libraries which perform these sorts of tasks with multi edges permitted too so.
import numpy as np
def compute_resistances(laplacian):
	n = laplacian.shape[0]
	resistances = np.zeros((n,n))
	laplacian_pseudo_inv = np.linalg.pinv(laplacian)
	for i in range(n):
		for j in range(n):
			if i != j:
				resistances[i,j] = laplacian_pseudo_inv[i,i] + laplacian_pseudo_inv[j,j] - 2 * laplacian_pseudo_inv[i,j]
	return resistances

L = np.array([
	[2,0,0,-1,0,-1],
	[0,2,0,0,-1,-1],
	[0,0,3,0,-2,-1],
	[-1,0,0,3,-2,0],
	[0,-1,-2,-2,5,0],
	[-1,-1,-1,0,0,3]
])

#print(compute_resistances(L))
av=[]
lol=compute_resistances(L)
for a in range(5):
	for b in range(a+1,5):
		#print(lol[a][b]*47)
		av.append(lol[a][b]*47)
av.sort()
#print(av) # Fairly confident that perhaps the resistance should be 1/2 not 2x or something and that there might be some issue with the task statement numerics otherwise or something.
# [19.0,20.000000000000004,31.000000000000007,33.000000000000014,35.00000000000002,39.00000000000001,39.99999999999999,45.0,46.000000000000014,52.000000000000014]

import networkx as nx
def is_planar_graph(edges):
	G = nx.Graph()
	G.add_edges_from(edges)
	is_planar, _ = nx.check_planarity(G)
	return is_planar

from collections import defaultdict
def is_graph_connected(edges):
	if not edges:
		return True
	graph = defaultdict(set)
	for u,v in edges:
		graph[u].add(v)
		graph[v].add(u)
	vertices = set(graph.keys())
	start = next(iter(vertices))
	visited = set()
	stack = [start]
	while stack:
		node = stack.pop()
		if node not in visited:
			visited.add(node)
			stack.extend(graph[node] - visited)
	return visited == vertices

from itertools import permutations
def generate_permutations(n_max=7):
	all_permutations = []
	for n in range(n_max + 1):
		numbers = list(range(n + 1))
		perm_list = list(map(list,permutations(numbers)))
		all_permutations.append(perm_list)
	return all_permutations
permutations = generate_permutations()
permutationsrange=[[[] for a in range(8)] for b in range(8)] # Inclusive At The Bounds
import copy
for a in range(8):
	for b in range(a,8):
		for permutation in permutations[b-a]:
			# Add a To Each Element In The Permutation
			lolol=copy.deepcopy(permutation)
			for c in range(len(lolol)):
				lolol[c]+=a
			permutationsrange[a][b].append(lolol)

from itertools import combinations_with_replacement
def partitions(n,k):
	if k == 1:
		yield [n]
	else:
		for i in range(n + 1):
			for part in partitions(n - i,k - 1):
				yield [i] + part
def generate_partitions(aaaaaa,bbbbbb):
	result = []
	for num in range(aaaaaa):  # 14 With 14 Below Works Or 10 With 16 Maybe For The Other Part
		num_partitions = []
		for parts in range(1,bbbbbb):  # 1 to 12 parts
			num_partitions.append(list(partitions(num,parts)))
		result.append(num_partitions)
	return result
partition_list = generate_partitions(10,16)
#print(len(partition_list))
#print(len(partition_list[0]))
#totalsize=0
#for a in range(len(partition_list)):
#	for b in range(len(partition_list[a])):
#		totalsize+=len(partition_list[a][b])
#		print(len(partition_list[a][b]))
#print(totalsize)

import networkx as nx
import matplotlib.pyplot as plt
def draw_graph(edges):
	G = nx.MultiGraph()
	G.add_edges_from(edges)
	plt.figure(figsize=(10,10))
	pos = nx.spring_layout(G,seed=42)
	nx.draw_networkx_nodes(G,pos,node_color='lightblue',node_size=200)
	nx.draw_networkx_labels(G,pos,font_size=10)
	edge_count = {}
	for u,v,key in G.edges(keys=True):
		edge_count[(u,v)] = edge_count.get((u,v),0) + 1
		rad = 0.2 * (edge_count[(u,v)] - 1)
		nx.draw_networkx_edges(G,pos,edgelist=[(u,v)],connectionstyle=f'arc3,rad={rad}',edge_color='gray')
	nx.draw_networkx_edge_labels(G,pos,edge_labels={(u,v,k): f'{u}-{v}' for u,v,k in G.edges(keys=True)})
	plt.show()

# Should possibly just manually enumerate all interesting cases uh up to like 2 or 3 additional edges and think about how they can go down like uh... in terms of actual configurations uh. The depicted one from earlier actually generalises up to a structure of like uh... a bigger graph uh smaller graph I mean which is expanded inside of uh. So like for the 11 case maybe I should start there and do this rigourously either there are 10 vertices which somehow have 1 additional edge would break down in to uh cycles either 2 cycles with 1 edge connecting which is an instant failure or like 1 cycle with 1 edge uh or uh 11 vertices in a cycle or something so we get all fails I think. Now for 12 edges we have more options. Could be like a cycle with 2 edges or 2 cycles with 2 edges or something but not more because uh e.g. symmetry in a cycle with only 1 edge touching that connected component fails or something. And I think those were failures. Oh but earlier there was a cycle with 2 edges uh we could have like a 9 cycle with 2 edges added earlier uh and I think I tried that one too but due to symmetry it fails or something. But now uh we could have like 10 vertices but uh basically just uh for the 11 case could also try other strategies. Oh think the uh chain inside the cycle itself also fails due to like a simple symmetry issue. So uh there must be some other interesting shapes uh. But maybe the 12 shape with like a uh... basically uh say uh... 4 nodes with degree 3 could be cool so like it makes a K4 essentially where each sub dude has length uh at least 1 I think uh try that case out uh... let me try to code up those cases egh. For the 11... uh the more formal theorem proving here would be like uh basically if we pretend the vertices with degree 2 do not even exist and smooth them out we then reduce the configuration in to a graph where every vertex has degree over 2 that is to say >=3. And then from there we could do casework on those underlying configurations when zoning in on 13 and 14 potential configurations. Interesting enough problem which comes in to me parsing through some ChatGPT o4 output on the topic of how to combinatorially generate each and every such graph uh so as to not waste memory or compute and see if I could automate this beautifully but alas that might be quite tricky would possibly take multiple days or like 1 week even to hack around from scratch maybe maybe would depend on the libraries suggested by Chat. Well well well uh I think I mean I could probably just use C++ maybe to generate uh all of the potential graph shapes actually uh. Maybe instead of doing it this way with the added edges I could actually try uh basically uh instead just uh trying to generate all of the possible outlines uh think about the added edges or whatever and casework through somehow uh but still need to include multi edges somehow ugh. OKOKOK so one kind of way to do it would be to force that uh the degrees are in order uh and then uh just try all 40 choose 12 cases uh but prune or something. And the number of extra edges we have is like already given by uh uh uh the uh we could compute it uh. And then could even check uh connectedness and then power through it I would guess uh. And then can sort the edges and then do this all more precisely algorithmically with respect to my underlying code or whatever. Ugh might need to rewrite this code to include self edges and note that the degree is uh going to have a 2* there for the self edge and also a checker for the right number of edges total being 12-a is <= the requisite number at the ==0 checker. Then on the confirmation half just break if there is any self edge because self edges themself must be broken in to parts. And think about how to case through the number of edges and the partitions half decently.
cv=[[[0,0],[0,0]],[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,1],[1,1]],[[0,0],[0,0],[0,0],[0,1],[0,1],[0,1]],[[0,0],[0,0],[0,0],[0,1],[0,1],[1,1]],[[0,0],[0,0],[0,0],[0,1],[0,1],[1,2],[2,2]],[[0,0],[0,0],[0,0],[0,1],[0,2],[1,1],[2,2]],[[0,0],[0,0],[0,0],[0,1],[0,2],[1,2],[1,2]],[[0,0],[0,0],[0,0],[0,1],[1,1]],[[0,0],[0,0],[0,0],[0,1],[1,1],[1,1]],[[0,0],[0,0],[0,0],[0,1],[1,1],[1,2],[2,2]],[[0,0],[0,0],[0,0],[0,1],[1,2],[1,2],[1,2]],[[0,0],[0,0],[0,0],[0,1],[1,2],[1,2],[2,3],[3,3]],[[0,0],[0,0],[0,0],[0,1],[1,2],[1,3],[2,2],[3,3]],[[0,0],[0,0],[0,0],[0,1],[1,2],[1,3],[2,3],[2,3]],[[0,0],[0,0],[0,0],[0,2],[1,1],[1,2],[1,2]],[[0,0],[0,0],[0,1],[0,1],[0,1]],[[0,0],[0,0],[0,1],[0,1],[0,1],[0,1]],[[0,0],[0,0],[0,1],[0,1],[0,1],[0,2],[2,2]],[[0,0],[0,0],[0,1],[0,1],[0,1],[1,1]],[[0,0],[0,0],[0,1],[0,1],[0,1],[1,2],[2,2]],[[0,0],[0,0],[0,1],[0,1],[0,2],[0,2],[1,2]],[[0,0],[0,0],[0,1],[0,1],[0,2],[1,1],[2,2]],[[0,0],[0,0],[0,1],[0,1],[0,2],[1,2],[1,2]],[[0,0],[0,0],[0,1],[0,1],[0,2],[1,2],[2,3],[3,3]],[[0,0],[0,0],[0,1],[0,1],[0,2],[1,3],[2,2],[3,3]],[[0,0],[0,0],[0,1],[0,1],[0,2],[1,3],[2,3],[2,3]],[[0,0],[0,0],[0,1],[0,1],[1,1]],[[0,0],[0,0],[0,1],[0,1],[1,1],[1,1]],[[0,0],[0,0],[0,1],[0,1],[1,1],[1,2],[2,2]],[[0,0],[0,0],[0,1],[0,1],[1,2],[1,2],[1,2]],[[0,0],[0,0],[0,1],[0,1],[1,2],[1,2],[2,2]],[[0,0],[0,0],[0,1],[0,1],[1,2],[1,2],[2,3],[3,3]],[[0,0],[0,0],[0,1],[0,1],[1,2],[1,3],[2,2],[3,3]],[[0,0],[0,0],[0,1],[0,1],[1,2],[1,3],[2,3],[2,3]],[[0,0],[0,0],[0,1],[0,1],[1,2],[2,2]],[[0,0],[0,0],[0,1],[0,1],[1,2],[2,3],[2,3],[3,4],[4,4]],[[0,0],[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,3],[4,4]],[[0,0],[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,4],[3,4]],[[0,0],[0,0],[0,1],[0,2],[0,2],[1,1],[1,2]],[[0,0],[0,0],[0,1],[0,2],[0,3],[1,1],[2,2],[3,3]],[[0,0],[0,0],[0,1],[0,2],[0,3],[1,1],[2,3],[2,3]],[[0,0],[0,0],[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],[[0,0],[0,0],[0,1],[0,2],[1,1],[1,1],[2,2]],[[0,0],[0,0],[0,1],[0,2],[1,1],[1,2],[1,2]],[[0,0],[0,0],[0,1],[0,2],[1,1],[1,2],[2,2]],[[0,0],[0,0],[0,1],[0,2],[1,1],[1,2],[2,3],[3,3]],[[0,0],[0,0],[0,1],[0,2],[1,1],[1,3],[2,2],[3,3]],[[0,0],[0,0],[0,1],[0,2],[1,1],[1,3],[2,3],[2,3]],[[0,0],[0,0],[0,1],[0,2],[1,1],[2,2]],[[0,0],[0,0],[0,1],[0,2],[1,1],[2,3],[2,3],[3,4],[4,4]],[[0,0],[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,3],[4,4]],[[0,0],[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,4],[3,4]],[[0,0],[0,0],[0,1],[0,2],[1,2],[1,2]],[[0,0],[0,0],[0,1],[0,2],[1,2],[1,2],[1,2]],[[0,0],[0,0],[0,1],[0,2],[1,2],[1,2],[1,3],[3,3]],[[0,0],[0,0],[0,1],[0,2],[1,2],[1,3],[1,3],[2,3]],[[0,0],[0,0],[0,1],[0,2],[1,2],[1,3],[2,3],[3,4],[4,4]],[[0,0],[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,3],[4,4]],[[0,0],[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,4],[3,4]],[[0,0],[0,0],[0,1],[0,2],[1,3],[1,3],[1,3],[2,2]],[[0,0],[0,0],[0,1],[0,2],[1,3],[1,3],[2,3],[2,4],[4,4]],[[0,0],[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,4],[3,4]],[[0,0],[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,4],[3,4]],[[0,0],[0,0],[0,1],[1,1]],[[0,0],[0,0],[0,1],[1,1],[1,1]],[[0,0],[0,0],[0,1],[1,1],[1,2],[1,2],[2,2]],[[0,0],[0,0],[0,1],[1,1],[1,2],[1,2],[2,3],[3,3]],[[0,0],[0,0],[0,1],[1,1],[1,2],[1,3],[2,2],[3,3]],[[0,0],[0,0],[0,1],[1,1],[1,2],[1,3],[2,3],[2,3]],[[0,0],[0,0],[0,1],[1,1],[1,2],[2,2]],[[0,0],[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3]],[[0,0],[0,0],[0,1],[1,1],[1,2],[2,3],[2,3],[2,3]],[[0,0],[0,0],[0,1],[1,1],[1,2],[2,3],[2,3],[3,4],[4,4]],[[0,0],[0,0],[0,1],[1,1],[1,2],[2,3],[2,4],[3,3],[4,4]],[[0,0],[0,0],[0,1],[1,1],[1,2],[2,3],[2,4],[3,4],[3,4]],[[0,0],[0,0],[0,1],[1,1],[1,3],[2,2],[2,3],[2,3]],[[0,0],[0,0],[0,1],[1,2],[1,2],[1,2]],[[0,0],[0,0],[0,1],[1,2],[1,2],[1,2],[1,2]],[[0,0],[0,0],[0,1],[1,2],[1,2],[1,2],[1,3],[3,3]],[[0,0],[0,0],[0,1],[1,2],[1,2],[1,2],[2,3],[3,3]],[[0,0],[0,0],[0,1],[1,2],[1,2],[1,3],[1,3],[2,3]],[[0,0],[0,0],[0,1],[1,2],[1,2],[1,3],[2,2],[3,3]],[[0,0],[0,0],[0,1],[1,2],[1,2],[1,3],[2,3],[2,3]],[[0,0],[0,0],[0,1],[1,2],[1,2],[1,3],[2,3],[3,4],[4,4]],[[0,0],[0,0],[0,1],[1,2],[1,2],[1,3],[2,4],[3,3],[4,4]],[[0,0],[0,0],[0,1],[1,2],[1,2],[1,3],[2,4],[3,4],[3,4]],[[0,0],[0,0],[0,1],[1,2],[1,2],[2,3],[3,3]],[[0,0],[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,0],[0,1],[1,2],[1,3],[1,3],[2,2],[2,3]],[[0,0],[0,0],[0,1],[1,2],[1,3],[1,4],[2,2],[3,3],[4,4]],[[0,0],[0,0],[0,1],[1,2],[1,3],[1,4],[2,2],[3,4],[3,4]],[[0,0],[0,0],[0,1],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,2],[3,3]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,3],[2,3]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,5]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,4],[5,5]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,5],[4,5]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,4],[3,5],[5,5]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,5],[3,5],[4,5]],[[0,0],[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,5]],[[0,0],[0,0],[0,2],[0,2],[1,1],[1,1],[1,2]],[[0,0],[0,0],[0,2],[0,2],[1,1],[1,2],[1,3],[3,3]],[[0,0],[0,0],[0,2],[0,2],[1,1],[1,3],[1,3],[2,3]],[[0,0],[0,0],[0,2],[0,2],[1,2],[1,3],[1,3],[1,3]],[[0,0],[0,0],[0,2],[0,3],[1,1],[1,2],[1,2],[3,3]],[[0,0],[0,0],[0,2],[0,3],[1,1],[1,2],[1,3],[2,3]],[[0,0],[0,0],[0,2],[0,3],[1,2],[1,2],[1,3],[1,3]],[[0,0],[0,0],[0,2],[1,1],[1,1],[1,2],[2,2]],[[0,0],[0,0],[0,2],[1,1],[1,1],[1,2],[2,3],[3,3]],[[0,0],[0,0],[0,2],[1,1],[1,1],[1,3],[2,3],[2,3]],[[0,0],[0,0],[0,2],[1,1],[1,2],[1,2]],[[0,0],[0,0],[0,2],[1,1],[1,2],[1,2],[1,2]],[[0,0],[0,0],[0,2],[1,1],[1,2],[1,2],[1,3],[3,3]],[[0,0],[0,0],[0,2],[1,1],[1,2],[1,3],[1,3],[2,3]],[[0,0],[0,0],[0,2],[1,1],[1,2],[1,3],[2,3],[3,4],[4,4]],[[0,0],[0,0],[0,2],[1,1],[1,2],[1,3],[2,4],[3,3],[4,4]],[[0,0],[0,0],[0,2],[1,1],[1,2],[1,3],[2,4],[3,4],[3,4]],[[0,0],[0,0],[0,2],[1,1],[1,3],[1,3],[2,3],[2,4],[4,4]],[[0,0],[0,0],[0,2],[1,1],[1,3],[1,3],[2,4],[2,4],[3,4]],[[0,0],[0,0],[0,2],[1,1],[1,3],[1,4],[2,3],[2,3],[4,4]],[[0,0],[0,0],[0,2],[1,1],[1,3],[1,4],[2,3],[2,4],[3,4]],[[0,0],[0,0],[0,2],[1,2],[1,2],[1,3],[1,3],[1,3]],[[0,0],[0,0],[0,2],[1,2],[1,2],[1,3],[1,3],[3,4],[4,4]],[[0,0],[0,0],[0,2],[1,2],[1,2],[1,3],[1,4],[3,3],[4,4]],[[0,0],[0,0],[0,2],[1,2],[1,2],[1,3],[1,4],[3,4],[3,4]],[[0,0],[0,0],[0,2],[1,2],[1,3],[1,3],[1,3],[2,4],[4,4]],[[0,0],[0,0],[0,2],[1,2],[1,3],[1,3],[1,4],[2,3],[4,4]],[[0,0],[0,0],[0,2],[1,2],[1,3],[1,3],[1,4],[2,4],[3,4]],[[0,0],[0,0],[0,2],[1,3],[1,3],[1,3],[1,4],[2,4],[2,4]],[[0,0],[0,0],[0,2],[1,3],[1,3],[1,4],[1,4],[2,3],[2,4]],[[0,0],[0,0],[0,3],[1,1],[1,2],[1,2],[2,3],[2,3]],[[0,0],[0,0],[0,3],[1,1],[1,2],[1,3],[2,2],[2,3]],[[0,0],[0,0],[0,3],[1,2],[1,2],[1,2],[1,3],[2,3]],[[0,0],[0,1],[0,1],[0,1]],[[0,0],[0,1],[0,1],[0,1],[0,1]],[[0,0],[0,1],[0,1],[0,1],[0,1],[0,1]],[[0,0],[0,1],[0,1],[0,1],[0,1],[0,2],[2,2]],[[0,0],[0,1],[0,1],[0,1],[0,1],[1,1]],[[0,0],[0,1],[0,1],[0,1],[0,1],[1,2],[2,2]],[[0,0],[0,1],[0,1],[0,1],[0,2],[0,2],[0,2]],[[0,0],[0,1],[0,1],[0,1],[0,2],[0,2],[1,2]],[[0,0],[0,1],[0,1],[0,1],[0,2],[0,2],[2,3],[3,3]],[[0,0],[0,1],[0,1],[0,1],[0,2],[0,3],[2,2],[3,3]],[[0,0],[0,1],[0,1],[0,1],[0,2],[0,3],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,1],[0,2],[1,1],[2,2]],[[0,0],[0,1],[0,1],[0,1],[0,2],[1,2],[1,2]],[[0,0],[0,1],[0,1],[0,1],[0,2],[1,2],[2,2]],[[0,0],[0,1],[0,1],[0,1],[0,2],[1,2],[2,3],[3,3]],[[0,0],[0,1],[0,1],[0,1],[0,2],[1,3],[2,2],[3,3]],[[0,0],[0,1],[0,1],[0,1],[0,2],[1,3],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,1],[0,2],[2,2]],[[0,0],[0,1],[0,1],[0,1],[0,2],[2,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,1],[0,1],[1,1]],[[0,0],[0,1],[0,1],[0,1],[1,2],[1,2],[2,2]],[[0,0],[0,1],[0,1],[0,1],[1,2],[1,2],[2,3],[3,3]],[[0,0],[0,1],[0,1],[0,1],[1,2],[1,3],[2,2],[3,3]],[[0,0],[0,1],[0,1],[0,1],[1,2],[1,3],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,1],[1,2],[2,2]],[[0,0],[0,1],[0,1],[0,1],[1,2],[2,2],[2,3],[3,3]],[[0,0],[0,1],[0,1],[0,1],[1,2],[2,3],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,1],[1,2],[2,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,1],[0,1],[1,2],[2,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,1],[0,1],[1,2],[2,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,1],[0,1],[1,3],[2,2],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,2],[0,2],[0,2],[1,1]],[[0,0],[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[3,3]],[[0,0],[0,1],[0,1],[0,2],[0,2],[0,3],[1,3],[2,3]],[[0,0],[0,1],[0,1],[0,2],[0,2],[1,1],[1,2]],[[0,0],[0,1],[0,1],[0,2],[0,2],[1,1],[2,2]],[[0,0],[0,1],[0,1],[0,2],[0,2],[1,1],[2,3],[3,3]],[[0,0],[0,1],[0,1],[0,2],[0,2],[1,2]],[[0,0],[0,1],[0,1],[0,2],[0,2],[1,2],[1,2]],[[0,0],[0,1],[0,1],[0,2],[0,2],[1,2],[1,3],[3,3]],[[0,0],[0,1],[0,1],[0,2],[0,2],[1,3],[1,3],[2,3]],[[0,0],[0,1],[0,1],[0,2],[0,2],[1,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,1],[2,2],[3,3]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,1],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,2],[1,2],[3,3]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,2],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,3],[4,4]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,4],[3,4]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,3],[4,4]],[[0,0],[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,4],[3,4]],[[0,0],[0,1],[0,1],[0,2],[1,1],[1,2],[2,2]],[[0,0],[0,1],[0,1],[0,2],[1,1],[1,2],[2,3],[3,3]],[[0,0],[0,1],[0,1],[0,2],[1,1],[1,3],[2,2],[3,3]],[[0,0],[0,1],[0,1],[0,2],[1,1],[1,3],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,2],[1,1],[2,2]],[[0,0],[0,1],[0,1],[0,2],[1,1],[2,2],[2,3],[3,3]],[[0,0],[0,1],[0,1],[0,2],[1,1],[2,3],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,2],[1,1],[2,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,1],[0,2],[1,1],[2,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,1],[0,2],[1,1],[2,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,1],[0,2],[1,2],[1,2]],[[0,0],[0,1],[0,1],[0,2],[1,2],[1,2],[1,2]],[[0,0],[0,1],[0,1],[0,2],[1,2],[1,2],[1,3],[3,3]],[[0,0],[0,1],[0,1],[0,2],[1,2],[1,2],[2,3],[3,3]],[[0,0],[0,1],[0,1],[0,2],[1,2],[1,3],[1,3],[2,3]],[[0,0],[0,1],[0,1],[0,2],[1,2],[1,3],[2,2],[3,3]],[[0,0],[0,1],[0,1],[0,2],[1,2],[1,3],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,2],[1,2],[1,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,1],[0,2],[1,2],[1,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,1],[0,2],[1,2],[1,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,1],[0,2],[1,2],[2,3],[3,3]],[[0,0],[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[1,3],[1,3],[2,2]],[[0,0],[0,1],[0,1],[0,2],[1,3],[1,3],[2,2],[2,3]],[[0,0],[0,1],[0,1],[0,2],[1,3],[1,3],[2,2],[3,4],[4,4]],[[0,0],[0,1],[0,1],[0,2],[1,3],[1,3],[2,3],[2,4],[4,4]],[[0,0],[0,1],[0,1],[0,2],[1,3],[1,3],[2,4],[2,4],[3,4]],[[0,0],[0,1],[0,1],[0,2],[1,3],[1,4],[2,2],[3,3],[4,4]],[[0,0],[0,1],[0,1],[0,2],[1,3],[1,4],[2,2],[3,4],[3,4]],[[0,0],[0,1],[0,1],[0,2],[1,3],[1,4],[2,3],[2,3],[4,4]],[[0,0],[0,1],[0,1],[0,2],[1,3],[1,4],[2,3],[2,4],[3,4]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,2],[3,3]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,2],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,2],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,2],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,4],[2,4],[3,3],[4,5],[5,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,4],[2,4],[3,4],[3,5],[5,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,4],[2,4],[3,5],[3,5],[4,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,3],[4,4],[5,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,3],[4,5],[4,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,4],[3,4],[5,5]],[[0,0],[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,5]],[[0,0],[0,1],[0,1],[0,3],[1,1],[2,2],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,3],[1,2],[1,2],[2,2],[3,3]],[[0,0],[0,1],[0,1],[0,3],[1,2],[1,2],[2,3],[2,3]],[[0,0],[0,1],[0,1],[0,3],[1,2],[1,3],[2,2],[2,3]],[[0,0],[0,1],[0,1],[1,1]],[[0,0],[0,1],[0,1],[1,2],[1,2],[2,2]],[[0,0],[0,1],[0,1],[1,2],[1,2],[2,3],[2,3],[3,3]],[[0,0],[0,1],[0,1],[1,2],[1,2],[2,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,1],[1,2],[1,2],[2,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,1],[1,2],[1,2],[2,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,1],[1,2],[1,2],[2,3],[3,3]],[[0,0],[0,1],[0,1],[1,2],[1,2],[2,3],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,2],[2,3],[3,3]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,2],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,2],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,2],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,2],[3,3]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,2],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,3],[2,3]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,3],[2,3],[2,3]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,3],[2,3],[2,4],[4,4]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,3],[2,4],[2,4],[3,4]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,4],[2,4],[2,4],[3,3]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,4],[2,4],[3,4],[3,5],[5,5]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,4],[2,4],[3,5],[3,5],[4,5]],[[0,0],[0,1],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,5]],[[0,0],[0,1],[0,1],[1,2],[2,2]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,3],[3,4],[4,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,3],[3,4],[4,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,3],[3,4],[4,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,3],[4,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,3],[4,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,3],[4,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,4],[3,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,4],[3,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,4],[3,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,5],[3,5],[4,5],[4,6],[6,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,5],[3,5],[4,6],[4,6],[5,6]],[[0,0],[0,1],[0,1],[1,2],[2,3],[2,4],[3,5],[3,6],[4,5],[4,6],[5,6]],[[0,0],[0,1],[0,1],[1,3],[1,3],[2,2],[2,3],[2,4],[4,4]],[[0,0],[0,1],[0,1],[1,3],[1,3],[2,2],[2,4],[2,4],[3,4]],[[0,0],[0,1],[0,1],[1,3],[1,3],[2,3],[2,4],[2,4],[2,4]],[[0,0],[0,1],[0,1],[1,3],[1,4],[2,2],[2,3],[2,3],[4,4]],[[0,0],[0,1],[0,1],[1,3],[1,4],[2,2],[2,3],[2,4],[3,4]],[[0,0],[0,1],[0,1],[1,3],[1,4],[2,3],[2,3],[2,4],[2,4]],[[0,0],[0,1],[0,2],[0,2],[0,2],[1,1],[1,1]],[[0,0],[0,1],[0,2],[0,2],[0,2],[1,1],[1,3],[3,3]],[[0,0],[0,1],[0,2],[0,2],[0,2],[1,3],[1,3],[1,3]],[[0,0],[0,1],[0,2],[0,2],[0,3],[1,1],[1,2],[3,3]],[[0,0],[0,1],[0,2],[0,2],[0,3],[1,1],[1,3],[2,3]],[[0,0],[0,1],[0,2],[0,2],[0,3],[1,2],[1,3],[1,3]],[[0,0],[0,1],[0,2],[0,2],[1,1],[1,2]],[[0,0],[0,1],[0,2],[0,2],[1,1],[1,2],[1,2]],[[0,0],[0,1],[0,2],[0,2],[1,1],[1,2],[1,3],[3,3]],[[0,0],[0,1],[0,2],[0,2],[1,1],[1,3],[1,3],[2,3]],[[0,0],[0,1],[0,2],[0,2],[1,1],[1,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,2],[0,2],[1,1],[1,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,2],[0,2],[1,1],[1,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,2],[0,2],[1,2],[1,3],[1,3],[1,3]],[[0,0],[0,1],[0,2],[0,2],[1,2],[1,3],[1,3],[3,4],[4,4]],[[0,0],[0,1],[0,2],[0,2],[1,2],[1,3],[1,4],[3,3],[4,4]],[[0,0],[0,1],[0,2],[0,2],[1,2],[1,3],[1,4],[3,4],[3,4]],[[0,0],[0,1],[0,2],[0,2],[1,3],[1,3],[1,3],[2,4],[4,4]],[[0,0],[0,1],[0,2],[0,2],[1,3],[1,3],[1,4],[2,3],[4,4]],[[0,0],[0,1],[0,2],[0,2],[1,3],[1,3],[1,4],[2,4],[3,4]],[[0,0],[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,3],[4,4]],[[0,0],[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,4],[3,4]],[[0,0],[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,4],[3,4]],[[0,0],[0,1],[0,2],[0,3],[0,4],[1,2],[1,2],[3,4],[3,4]],[[0,0],[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,4],[3,4]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,2],[1,3],[2,3]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,2],[2,2],[3,3]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,2],[2,3],[2,3]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,2],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,2],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,2],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,3],[2,2],[2,3]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,4],[2,2],[3,3],[4,4]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,4],[2,2],[3,4],[3,4]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,4],[2,3],[2,3],[4,4]],[[0,0],[0,1],[0,2],[0,3],[1,1],[1,4],[2,3],[2,4],[3,4]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,2],[3,3]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,2],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,2],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,2],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,3],[2,3]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,3],[2,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,3],[2,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,3],[2,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,4],[2,4],[3,4],[3,5],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,4],[2,4],[3,5],[3,5],[4,5]],[[0,0],[0,1],[0,2],[0,3],[1,1],[2,4],[2,5],[3,4],[3,5],[4,5]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,2],[1,2],[3,3]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,2],[1,3],[1,3]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,2],[1,3],[2,3]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,2],[1,3],[3,4],[4,4]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,2],[1,4],[3,3],[4,4]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,2],[1,4],[3,4],[3,4]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,2],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,2],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,2],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,3],[1,4],[2,3],[4,4]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,3],[1,4],[2,4],[3,4]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,4],[1,4],[2,3],[3,4]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,4],[1,4],[2,4],[3,3]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,4],[2,4],[3,4],[3,5],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,4],[2,4],[3,5],[3,5],[4,5]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,4],[3,4],[5,5]],[[0,0],[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,4],[3,5],[4,5]],[[0,0],[0,1],[0,2],[0,3],[1,4],[1,4],[1,4],[2,2],[3,3]],[[0,0],[0,1],[0,2],[0,3],[1,4],[1,4],[1,4],[2,3],[2,3]],[[0,0],[0,1],[0,2],[0,3],[1,4],[1,4],[2,4],[2,5],[3,5],[3,5]],[[0,0],[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]],[[0,0],[0,1],[0,2],[1,1],[1,2],[2,2]],[[0,0],[0,1],[0,2],[1,1],[1,2],[2,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,2],[1,1],[1,2],[2,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,2],[1,1],[1,2],[2,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,2],[1,1],[1,2],[2,3],[3,3]],[[0,0],[0,1],[0,2],[1,1],[1,2],[2,3],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[1,1],[1,2],[2,3],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,1],[1,2],[2,3],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,2],[2,3],[3,3]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,2],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,2],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,2],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,2],[3,3]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,2],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,2],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,2],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,3],[2,3]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,3],[2,3],[2,3]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,3],[2,3],[2,4],[4,4]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,3],[2,4],[2,4],[3,4]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,3],[2,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,3],[2,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,3],[2,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,4],[2,4],[2,4],[3,3]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,4],[2,4],[3,4],[3,5],[5,5]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,4],[2,4],[3,5],[3,5],[4,5]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,4],[2,5],[3,4],[3,5],[4,5]],[[0,0],[0,1],[0,2],[1,1],[2,2]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,3],[3,4],[4,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,3],[3,4],[4,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,3],[3,4],[4,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,3],[4,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,3],[4,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,3],[4,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,4],[3,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,4],[3,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,4],[3,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,5],[3,5],[4,5],[4,6],[6,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,5],[3,5],[4,6],[4,6],[5,6]],[[0,0],[0,1],[0,2],[1,1],[2,3],[2,4],[3,5],[3,6],[4,5],[4,6],[5,6]],[[0,0],[0,1],[0,2],[1,2],[1,2]],[[0,0],[0,1],[0,2],[1,2],[1,2],[1,2]],[[0,0],[0,1],[0,2],[1,2],[1,2],[1,3],[2,3],[3,3]],[[0,0],[0,1],[0,2],[1,2],[1,2],[1,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,2],[1,2],[1,2],[1,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,2],[1,2],[1,2],[1,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,2],[1,2],[1,2],[1,3],[3,3]],[[0,0],[0,1],[0,2],[1,2],[1,2],[1,3],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[1,2],[1,2],[1,3],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,2],[1,2],[1,3],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,3],[2,3]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,3],[2,3],[2,3]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,3],[2,3],[2,4],[4,4]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,3],[2,4],[2,4],[3,4]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,3],[2,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,3],[2,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,3],[2,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,4],[2,3],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,4],[2,3],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,4],[2,3],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,4],[2,5],[3,3],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,4],[2,5],[3,3],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,4],[2,5],[3,4],[3,4],[5,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[1,4],[2,5],[3,4],[3,5],[4,5]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,3],[3,4],[4,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,3],[3,4],[4,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,3],[3,4],[4,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,3],[4,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,3],[4,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,3],[4,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,4],[3,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,4],[3,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,4],[3,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,5],[3,5],[4,5],[4,6],[6,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,5],[3,5],[4,6],[4,6],[5,6]],[[0,0],[0,1],[0,2],[1,2],[1,3],[2,4],[3,5],[3,6],[4,5],[4,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,3],[2,2]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,3],[2,4],[2,4],[2,4]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,3],[2,4],[2,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,3],[2,4],[2,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,3],[2,4],[2,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,2],[3,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,2],[3,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,2],[3,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,3],[2,4],[2,4]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,3],[2,4],[4,5],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,3],[2,5],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,3],[2,5],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,4],[2,4],[3,5],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,4],[2,5],[3,4],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,4],[2,5],[3,5],[4,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,5],[2,5],[3,4],[4,5]],[[0,0],[0,1],[0,2],[1,3],[1,3],[1,4],[2,5],[2,5],[3,5],[4,4]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,3],[2,4],[4,4]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,3],[2,4],[4,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,3],[2,4],[4,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,3],[2,4],[4,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,4],[3,4]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,4],[3,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,4],[3,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,4],[3,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,5],[3,4],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,5],[3,4],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,5],[3,4],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,5],[3,6],[4,4],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,5],[3,6],[4,4],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,5],[3,6],[4,5],[4,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,3],[2,4],[2,5],[3,6],[4,5],[4,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[1,5],[2,2],[3,3],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,4],[1,5],[2,2],[3,3],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,3],[1,4],[1,5],[2,2],[3,4],[3,5],[4,5]],[[0,0],[0,1],[0,2],[1,3],[1,4],[1,5],[2,3],[2,3],[4,4],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,4],[1,5],[2,3],[2,3],[4,5],[4,5]],[[0,0],[0,1],[0,2],[1,3],[1,4],[1,5],[2,3],[2,4],[3,4],[5,5]],[[0,0],[0,1],[0,2],[1,3],[1,4],[1,5],[2,3],[2,4],[3,5],[4,5]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,4],[3,4]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,4],[3,5],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,4],[3,5],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,4],[3,5],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,5],[3,4],[4,5],[5,6],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,5],[3,4],[4,6],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,5],[3,4],[4,6],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,5],[3,6],[4,4],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,5],[3,6],[4,4],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,5],[3,6],[4,5],[4,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,3],[2,5],[3,6],[4,5],[4,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,3],[4,4],[5,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,3],[4,4],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,3],[4,5],[4,5],[6,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,3],[4,5],[4,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,4],[3,4],[5,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,4],[3,5],[4,6],[5,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,5],[3,5],[4,6],[4,6]],[[0,0],[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,5],[3,6],[4,5],[4,6]],[[0,0],[0,1],[0,3],[0,3],[1,1],[1,2],[2,2],[2,3]],[[0,0],[0,1],[0,3],[0,3],[1,2],[1,2],[1,2],[2,3]],[[0,0],[0,1],[0,3],[0,3],[1,2],[1,2],[1,3],[2,2]],[[0,0],[0,1],[0,3],[1,1],[1,3],[2,2],[2,3],[2,4],[4,4]],[[0,0],[0,1],[0,3],[1,1],[1,3],[2,2],[2,4],[2,4],[3,4]],[[0,0],[0,1],[0,3],[1,1],[1,3],[2,3],[2,4],[2,4],[2,4]],[[0,0],[0,1],[0,3],[1,1],[1,4],[2,2],[2,3],[2,3],[4,4]],[[0,0],[0,1],[0,3],[1,1],[1,4],[2,2],[2,3],[2,4],[3,4]],[[0,0],[0,1],[0,3],[1,1],[1,4],[2,3],[2,3],[2,4],[2,4]],[[0,0],[0,1],[0,3],[1,2],[1,2],[1,2],[2,3],[3,4],[4,4]],[[0,0],[0,1],[0,3],[1,2],[1,2],[1,2],[2,4],[3,3],[4,4]],[[0,0],[0,1],[0,3],[1,2],[1,2],[1,2],[2,4],[3,4],[3,4]],[[0,0],[0,1],[0,3],[1,2],[1,2],[1,3],[2,3],[2,4],[4,4]],[[0,0],[0,1],[0,3],[1,2],[1,2],[1,3],[2,4],[2,4],[3,4]],[[0,0],[0,1],[0,3],[1,2],[1,2],[1,4],[2,3],[2,3],[4,4]],[[0,0],[0,1],[0,3],[1,2],[1,2],[1,4],[2,3],[2,4],[3,4]],[[0,0],[0,1],[0,3],[1,2],[1,2],[1,4],[2,4],[2,4],[3,3]],[[0,0],[0,1],[0,3],[1,2],[1,3],[1,3],[2,2],[2,4],[4,4]],[[0,0],[0,1],[0,3],[1,2],[1,3],[1,3],[2,4],[2,4],[2,4]],[[0,0],[0,1],[0,3],[1,2],[1,3],[1,4],[2,2],[2,3],[4,4]],[[0,0],[0,1],[0,3],[1,2],[1,3],[1,4],[2,2],[2,4],[3,4]],[[0,0],[0,1],[0,3],[1,2],[1,3],[1,4],[2,3],[2,4],[2,4]],[[0,0],[0,1],[0,3],[1,2],[1,4],[1,4],[2,2],[2,3],[3,4]],[[0,0],[0,1],[0,3],[1,2],[1,4],[1,4],[2,3],[2,3],[2,4]],[[0,0],[0,1],[0,3],[1,3],[1,3],[1,4],[2,2],[2,4],[2,4]],[[0,0],[0,1],[0,3],[1,3],[1,4],[1,4],[2,2],[2,3],[2,4]],[[0,0],[0,1],[0,3],[1,4],[1,4],[1,4],[2,2],[2,3],[2,3]],[[0,0],[0,1],[1,1]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,3]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,4],[4,5],[5,6],[5,6],[6,7],[7,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,4],[4,5],[5,6],[5,7],[6,6],[7,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,4],[4,5],[5,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,4],[5,6],[5,6],[6,7],[7,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,4],[5,6],[5,7],[6,6],[7,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,4],[5,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,5],[4,6],[5,6],[6,7],[7,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,5],[4,6],[5,7],[6,6],[7,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,5],[4,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,6],[4,6],[5,6],[5,7],[7,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,6],[4,6],[5,7],[5,7],[6,7]],[[0,0],[0,1],[1,2],[1,2],[2,3],[3,4],[3,5],[4,6],[4,7],[5,6],[5,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,3]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,4],[4,5],[5,6],[5,7],[6,6],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,4],[4,5],[5,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,4],[5,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,5],[4,6],[5,6],[6,7],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,5],[4,6],[5,7],[6,6],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,5],[4,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,6],[4,6],[5,6],[5,7],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,6],[4,6],[5,7],[5,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,2],[3,4],[3,5],[4,6],[4,7],[5,6],[5,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,3]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,5]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,4],[5,5]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,4],[5,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,5],[4,5]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,5],[4,6],[5,6],[6,7],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,5],[4,6],[5,7],[6,6],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,5],[4,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,6],[4,6],[5,6],[5,7],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,6],[4,6],[5,7],[5,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,3],[2,4],[3,5],[4,6],[4,7],[5,6],[5,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,4],[3,5],[5,5]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,4],[3,5],[5,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,5],[3,5],[4,5]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,5],[3,5],[4,6],[5,6],[6,7],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,5],[3,5],[4,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,5],[3,6],[4,5],[5,7],[6,6],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,5],[3,6],[4,5],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,5],[3,6],[4,7],[5,5],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,4],[3,5],[3,6],[4,7],[5,6],[5,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,5]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,6],[5,6],[6,7],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,6],[5,7],[6,6],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,6],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,6],[4,5],[5,6],[6,7],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,6],[4,5],[5,7],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,6],[4,7],[5,5],[6,6],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,6],[4,7],[5,5],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,6],[4,7],[5,6],[5,6],[7,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,4],[3,6],[4,7],[5,6],[5,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,4],[5,6],[5,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,5],[4,5],[6,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,5],[4,6],[5,7],[6,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,6],[4,6],[5,7],[5,7]],[[0,0],[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,6],[4,7],[5,6],[5,7]],[[0,0],[0,2],[0,2],[0,2],[0,3],[1,1],[1,3],[1,3]],[[0,0],[0,2],[0,2],[0,3],[0,3],[1,1],[1,2],[1,3]],[[0,0],[0,2],[0,2],[0,3],[1,1],[1,2],[1,3],[1,3]],[[0,0],[0,2],[0,2],[0,3],[1,1],[1,2],[1,3],[3,4],[4,4]],[[0,0],[0,2],[0,2],[0,3],[1,1],[1,2],[1,4],[3,3],[4,4]],[[0,0],[0,2],[0,2],[0,3],[1,1],[1,2],[1,4],[3,4],[3,4]],[[0,0],[0,2],[0,2],[0,3],[1,1],[1,3],[1,3],[2,4],[4,4]],[[0,0],[0,2],[0,2],[0,3],[1,1],[1,3],[1,4],[2,3],[4,4]],[[0,0],[0,2],[0,2],[0,3],[1,1],[1,3],[1,4],[2,4],[3,4]],[[0,0],[0,2],[0,2],[0,3],[1,1],[1,4],[1,4],[2,3],[3,4]],[[0,0],[0,2],[0,2],[0,3],[1,1],[1,4],[1,4],[2,4],[3,3]],[[0,0],[0,2],[0,2],[0,3],[1,2],[1,3],[1,3],[1,4],[4,4]],[[0,0],[0,2],[0,2],[0,3],[1,2],[1,3],[1,4],[1,4],[3,4]],[[0,0],[0,2],[0,2],[0,3],[1,2],[1,4],[1,4],[1,4],[3,3]],[[0,0],[0,2],[0,2],[0,3],[1,3],[1,3],[1,4],[1,4],[2,4]],[[0,0],[0,2],[0,2],[0,3],[1,3],[1,4],[1,4],[1,4],[2,3]],[[0,0],[0,2],[0,2],[1,1],[1,2],[1,3],[3,3]],[[0,0],[0,2],[0,2],[1,1],[1,2],[1,3],[3,4],[3,4],[4,5],[5,5]],[[0,0],[0,2],[0,2],[1,1],[1,2],[1,3],[3,4],[3,5],[4,4],[5,5]],[[0,0],[0,2],[0,2],[1,1],[1,2],[1,3],[3,4],[3,5],[4,5],[4,5]],[[0,0],[0,2],[0,2],[1,1],[1,3],[1,3],[2,3]],[[0,0],[0,2],[0,2],[1,1],[1,3],[1,3],[2,4],[3,4],[4,5],[5,5]],[[0,0],[0,2],[0,2],[1,1],[1,3],[1,3],[2,4],[3,5],[4,5],[4,5]],[[0,0],[0,2],[0,2],[1,1],[1,3],[1,4],[2,3],[3,4],[4,5],[5,5]],[[0,0],[0,2],[0,2],[1,1],[1,3],[1,4],[2,3],[3,5],[4,4],[5,5]],[[0,0],[0,2],[0,2],[1,1],[1,3],[1,4],[2,3],[3,5],[4,5],[4,5]],[[0,0],[0,2],[0,2],[1,1],[1,3],[1,4],[2,5],[3,3],[4,5],[4,5]],[[0,0],[0,2],[0,2],[1,1],[1,3],[1,4],[2,5],[3,4],[3,5],[4,5]],[[0,0],[0,2],[0,2],[1,2],[1,3],[1,3],[1,3]],[[0,0],[0,2],[0,2],[1,2],[1,3],[1,3],[1,4],[3,4],[4,5],[5,5]],[[0,0],[0,2],[0,2],[1,2],[1,3],[1,3],[1,4],[3,5],[4,4],[5,5]],[[0,0],[0,2],[0,2],[1,2],[1,3],[1,3],[1,4],[3,5],[4,5],[4,5]],[[0,0],[0,2],[0,2],[1,2],[1,3],[1,4],[1,5],[3,3],[4,4],[5,5]],[[0,0],[0,2],[0,2],[1,2],[1,3],[1,4],[1,5],[3,3],[4,5],[4,5]],[[0,0],[0,2],[0,2],[1,2],[1,3],[1,4],[1,5],[3,4],[3,5],[4,5]],[[0,0],[0,2],[0,2],[1,3],[1,3],[1,3],[1,4],[2,4],[4,5],[5,5]],[[0,0],[0,2],[0,2],[1,3],[1,3],[1,3],[1,4],[2,5],[4,5],[4,5]],[[0,0],[0,2],[0,2],[1,3],[1,3],[1,4],[1,4],[2,3],[4,5],[5,5]],[[0,0],[0,2],[0,2],[1,3],[1,3],[1,4],[1,4],[2,5],[3,5],[4,5]],[[0,0],[0,2],[0,2],[1,3],[1,3],[1,4],[1,5],[2,3],[4,4],[5,5]],[[0,0],[0,2],[0,2],[1,3],[1,3],[1,4],[1,5],[2,3],[4,5],[4,5]],[[0,0],[0,2],[0,2],[1,3],[1,3],[1,4],[1,5],[2,4],[3,4],[5,5]],[[0,0],[0,2],[0,2],[1,3],[1,3],[1,4],[1,5],[2,4],[3,5],[4,5]],[[0,0],[0,2],[0,3],[0,4],[1,1],[1,2],[1,2],[3,3],[4,4]],[[0,0],[0,2],[0,3],[0,4],[1,1],[1,2],[1,2],[3,4],[3,4]],[[0,0],[0,2],[0,3],[0,4],[1,1],[1,2],[1,3],[2,3],[4,4]],[[0,0],[0,2],[0,3],[0,4],[1,1],[1,2],[1,3],[2,4],[3,4]],[[0,0],[0,2],[0,3],[0,4],[1,2],[1,2],[1,3],[1,3],[4,4]],[[0,0],[0,2],[0,3],[0,4],[1,2],[1,2],[1,3],[1,4],[3,4]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,3],[2,3]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,3],[2,4],[3,4],[4,5],[5,5]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,3],[2,4],[3,5],[4,4],[5,5]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,3],[2,4],[3,5],[4,5],[4,5]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,4],[2,3],[3,4],[4,5],[5,5]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,4],[2,3],[3,5],[4,4],[5,5]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,4],[2,3],[3,5],[4,5],[4,5]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,4],[2,5],[3,3],[4,4],[5,5]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,4],[2,5],[3,3],[4,5],[4,5]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,4],[2,5],[3,4],[3,4],[5,5]],[[0,0],[0,2],[0,3],[1,1],[1,2],[1,4],[2,5],[3,4],[3,5],[4,5]],[[0,0],[0,2],[0,3],[1,1],[1,4],[1,5],[2,2],[3,4],[3,4],[5,5]],[[0,0],[0,2],[0,3],[1,1],[1,4],[1,5],[2,2],[3,4],[3,5],[4,5]],[[0,0],[0,2],[0,3],[1,1],[1,4],[1,5],[2,3],[2,4],[3,5],[4,5]],[[0,0],[0,2],[0,3],[1,1],[1,4],[1,5],[2,4],[2,4],[3,5],[3,5]],[[0,0],[0,2],[0,3],[1,1],[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,3],[1,3]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,3],[1,4],[3,4],[4,5],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,3],[1,4],[3,5],[4,4],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,3],[1,4],[3,5],[4,5],[4,5]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,4],[1,4],[3,3],[4,5],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,4],[1,4],[3,4],[3,5],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,4],[1,4],[3,5],[3,5],[4,5]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,4],[1,5],[3,3],[4,4],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,4],[1,5],[3,3],[4,5],[4,5]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,4],[1,5],[3,4],[3,4],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,2],[1,4],[1,5],[3,4],[3,5],[4,5]],[[0,0],[0,2],[0,3],[1,2],[1,3],[1,4],[1,4],[2,3],[4,5],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,3],[1,4],[1,4],[2,4],[3,5],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,3],[1,4],[1,4],[2,5],[3,5],[4,5]],[[0,0],[0,2],[0,3],[1,2],[1,3],[1,4],[1,5],[2,3],[4,4],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,3],[1,4],[1,5],[2,3],[4,5],[4,5]],[[0,0],[0,2],[0,3],[1,2],[1,3],[1,4],[1,5],[2,4],[3,4],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,3],[1,4],[1,5],[2,4],[3,5],[4,5]],[[0,0],[0,2],[0,3],[1,2],[1,4],[1,4],[1,4],[2,3],[3,5],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,4],[1,4],[1,4],[2,5],[3,3],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,4],[1,4],[1,4],[2,5],[3,5],[3,5]],[[0,0],[0,2],[0,3],[1,2],[1,4],[1,4],[1,5],[2,3],[3,4],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,4],[1,4],[1,5],[2,3],[3,5],[4,5]],[[0,0],[0,2],[0,3],[1,2],[1,4],[1,4],[1,5],[2,4],[3,3],[5,5]],[[0,0],[0,2],[0,3],[1,2],[1,4],[1,4],[1,5],[2,4],[3,5],[3,5]],[[0,0],[0,2],[0,3],[1,2],[1,4],[1,4],[1,5],[2,5],[3,3],[4,5]],[[0,0],[0,2],[0,3],[1,2],[1,4],[1,4],[1,5],[2,5],[3,4],[3,5]],[[0,0],[0,2],[0,3],[1,4],[1,4],[1,4],[1,5],[2,2],[3,5],[3,5]],[[0,0],[0,2],[0,3],[1,4],[1,4],[1,4],[1,5],[2,3],[2,5],[3,5]],[[0,0],[0,2],[0,3],[1,4],[1,4],[1,5],[1,5],[2,2],[3,4],[3,5]],[[0,0],[0,2],[0,3],[1,4],[1,4],[1,5],[1,5],[2,3],[2,4],[3,5]],[[0,0],[0,3],[0,3],[1,1],[1,3],[1,4],[2,2],[2,4],[2,4]],[[0,0],[0,3],[0,3],[1,2],[1,2],[1,2],[1,3],[2,4],[4,4]],[[0,0],[0,3],[0,3],[1,2],[1,2],[1,2],[1,4],[2,4],[3,4]],[[0,0],[0,3],[0,3],[1,2],[1,2],[1,3],[1,4],[2,4],[2,4]],[[0,0],[0,3],[0,4],[1,1],[1,3],[1,4],[2,2],[2,3],[2,4]],[[0,0],[0,3],[0,4],[1,2],[1,2],[1,2],[1,3],[2,3],[4,4]],[[0,0],[0,3],[0,4],[1,2],[1,2],[1,2],[1,3],[2,4],[3,4]],[[0,0],[0,3],[0,4],[1,2],[1,2],[1,3],[1,3],[2,4],[2,4]],[[0,0],[0,3],[0,4],[1,2],[1,2],[1,3],[1,4],[2,3],[2,4]],[[0,1],[0,1],[0,1]],[[0,1],[0,1],[0,1],[0,1]],[[0,1],[0,1],[0,1],[0,1],[0,1]],[[0,1],[0,1],[0,1],[0,1],[0,1],[0,1]],[[0,1],[0,1],[0,1],[0,1],[0,1],[0,2],[2,2]],[[0,1],[0,1],[0,1],[0,1],[0,2],[0,2],[0,2]],[[0,1],[0,1],[0,1],[0,1],[0,2],[0,2],[1,2]],[[0,1],[0,1],[0,1],[0,1],[0,2],[0,2],[2,2]],[[0,1],[0,1],[0,1],[0,1],[0,2],[0,2],[2,3],[3,3]],[[0,1],[0,1],[0,1],[0,1],[0,2],[0,3],[2,2],[3,3]],[[0,1],[0,1],[0,1],[0,1],[0,2],[0,3],[2,3],[2,3]],[[0,1],[0,1],[0,1],[0,1],[0,2],[1,2],[2,2]],[[0,1],[0,1],[0,1],[0,1],[0,2],[1,2],[2,3],[3,3]],[[0,1],[0,1],[0,1],[0,1],[0,2],[1,3],[2,2],[3,3]],[[0,1],[0,1],[0,1],[0,1],[0,2],[1,3],[2,3],[2,3]],[[0,1],[0,1],[0,1],[0,1],[0,2],[2,2]],[[0,1],[0,1],[0,1],[0,1],[0,2],[2,2],[2,3],[3,3]],[[0,1],[0,1],[0,1],[0,1],[0,2],[2,3],[2,3],[2,3]],[[0,1],[0,1],[0,1],[0,1],[0,2],[2,3],[2,3],[3,4],[4,4]],[[0,1],[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,3],[4,4]],[[0,1],[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,4],[3,4]],[[0,1],[0,1],[0,1],[0,1],[0,3],[2,2],[2,3],[2,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,2]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,2],[0,3],[3,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,2],[1,1]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,2],[1,2]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,2],[1,3],[3,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,3],[0,3],[2,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[3,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,3],[1,3],[2,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,3],[2,3],[3,4],[4,4]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,3],[2,4],[3,3],[4,4]],[[0,1],[0,1],[0,1],[0,2],[0,2],[0,3],[2,4],[3,4],[3,4]],[[0,1],[0,1],[0,1],[0,2],[0,2],[1,2]],[[0,1],[0,1],[0,1],[0,2],[0,2],[1,2],[1,2]],[[0,1],[0,1],[0,1],[0,2],[0,2],[1,2],[1,3],[3,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[1,2],[2,3],[3,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[1,3],[1,3],[2,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[1,3],[2,2],[3,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[1,3],[2,3],[2,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[1,3],[2,3],[3,4],[4,4]],[[0,1],[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,3],[4,4]],[[0,1],[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,4],[3,4]],[[0,1],[0,1],[0,1],[0,2],[0,2],[2,3],[3,3]],[[0,1],[0,1],[0,1],[0,2],[0,2],[2,3],[3,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,1],[0,2],[0,2],[2,3],[3,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,1],[0,2],[0,2],[2,3],[3,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,1],[0,2],[0,3],[0,4],[2,2],[3,3],[4,4]],[[0,1],[0,1],[0,1],[0,2],[0,3],[0,4],[2,2],[3,4],[3,4]],[[0,1],[0,1],[0,1],[0,2],[0,3],[0,4],[2,3],[2,4],[3,4]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,2],[2,2],[3,3]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,2],[2,3],[2,3]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,2],[2,3],[3,4],[4,4]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,3],[4,4]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,4],[3,4]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,3],[2,2],[2,3]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,3],[4,4]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,4],[3,4]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,3],[4,4]],[[0,1],[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,4],[3,4]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,2],[3,3]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,2],[3,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,2],[3,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,2],[3,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,3],[2,3]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,3],[2,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,3],[2,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,3],[2,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,4],[2,4],[3,4],[3,5],[5,5]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,4],[2,4],[3,5],[3,5],[4,5]],[[0,1],[0,1],[0,1],[0,2],[0,3],[2,4],[2,5],[3,4],[3,5],[4,5]],[[0,1],[0,1],[0,1],[0,2],[1,2],[2,3],[2,3],[3,4],[4,4]],[[0,1],[0,1],[0,1],[0,2],[1,2],[2,3],[2,4],[3,3],[4,4]],[[0,1],[0,1],[0,1],[0,2],[1,2],[2,3],[2,4],[3,4],[3,4]],[[0,1],[0,1],[0,1],[0,2],[1,2],[2,3],[3,3]],[[0,1],[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,2],[3,3]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,2],[3,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,2],[3,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,2],[3,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,3],[2,3]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,3],[2,3],[2,3]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,3],[2,3],[2,4],[4,4]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[2,4],[3,4]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,4],[2,4],[2,4],[3,3]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,4],[2,4],[3,4],[3,5],[5,5]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,4],[2,4],[3,5],[3,5],[4,5]],[[0,1],[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,5]],[[0,1],[0,1],[0,1],[0,2],[2,2]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,3],[3,4],[4,4]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,3],[3,4],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,3],[3,4],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,3],[3,4],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,3],[4,4]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,3],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,3],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,3],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,4],[3,4]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,4],[3,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,4],[3,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,4],[3,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,5],[3,5],[4,5],[4,6],[6,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,5],[3,5],[4,6],[4,6],[5,6]],[[0,1],[0,1],[0,1],[0,2],[2,3],[2,4],[3,5],[3,6],[4,5],[4,6],[5,6]],[[0,1],[0,1],[0,1],[0,3],[0,3],[1,2],[2,2],[2,3]],[[0,1],[0,1],[0,1],[0,3],[1,3],[2,3],[2,4],[2,4],[2,4]],[[0,1],[0,1],[0,1],[0,3],[1,4],[2,3],[2,3],[2,4],[2,4]],[[0,1],[0,1],[0,2],[0,2],[0,2],[0,3],[1,1],[3,3]],[[0,1],[0,1],[0,2],[0,2],[0,2],[0,3],[1,3],[1,3]],[[0,1],[0,1],[0,2],[0,2],[0,2],[1,1]],[[0,1],[0,1],[0,2],[0,2],[0,2],[1,3],[1,3],[1,3]],[[0,1],[0,1],[0,2],[0,2],[0,2],[1,3],[1,3],[3,4],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,2],[1,3],[1,4],[3,3],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,2],[1,3],[1,4],[3,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[0,3],[1,1],[2,3]],[[0,1],[0,1],[0,2],[0,2],[0,3],[0,3],[1,2],[1,3]],[[0,1],[0,1],[0,2],[0,2],[0,3],[0,3],[1,2],[3,4],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[0,3],[1,4],[2,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[0,4],[1,2],[3,3],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[0,4],[1,2],[3,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[0,4],[1,3],[2,3],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[0,4],[1,3],[2,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,1],[2,2],[3,3]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,1],[2,3],[2,3]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,1],[2,3],[3,4],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,1],[2,4],[3,3],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,1],[2,4],[3,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[1,2],[3,3]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[1,3],[1,3]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[1,3],[2,3]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[1,3],[3,4],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[1,4],[3,3],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[1,4],[3,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[3,3]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[3,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[3,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,2],[3,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,3],[1,3],[2,4],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,3],[1,4],[2,3],[4,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,3],[1,4],[2,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,3],[2,3]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,3],[2,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,3],[2,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,3],[2,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,4],[1,4],[2,3],[3,4]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,4],[1,4],[2,4],[3,3]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,4],[2,4],[3,3],[4,5],[5,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,4],[2,4],[3,4],[3,5],[5,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,4],[2,4],[3,5],[3,5],[4,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,4],[2,5],[3,3],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,4],[2,5],[3,3],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,4],[2,5],[3,4],[3,4],[5,5]],[[0,1],[0,1],[0,2],[0,2],[0,3],[1,4],[2,5],[3,4],[3,5],[4,5]],[[0,1],[0,1],[0,2],[0,2],[1,2]],[[0,1],[0,1],[0,2],[0,2],[1,2],[1,2]],[[0,1],[0,1],[0,2],[0,2],[1,2],[1,3],[2,3],[3,4],[4,4]],[[0,1],[0,1],[0,2],[0,2],[1,2],[1,3],[2,4],[3,3],[4,4]],[[0,1],[0,1],[0,2],[0,2],[1,2],[1,3],[2,4],[3,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[1,2],[1,3],[3,3]],[[0,1],[0,1],[0,2],[0,2],[1,2],[1,3],[3,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,2],[0,2],[1,2],[1,3],[3,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,2],[1,2],[1,3],[3,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,3],[2,3]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,3],[2,3],[2,3]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,3],[2,3],[2,4],[4,4]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,3],[2,4],[2,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,3],[2,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,3],[2,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,3],[2,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,4],[2,3],[2,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,4],[2,3],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,4],[2,3],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,4],[2,3],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,4],[2,5],[3,3],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,4],[2,5],[3,3],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,4],[2,5],[3,4],[3,4],[5,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[1,4],[2,5],[3,4],[3,5],[4,5]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,3],[3,4],[4,4]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,3],[3,4],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,3],[3,4],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,3],[3,4],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,3],[4,4]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,3],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,3],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,3],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,4],[3,4]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,4],[3,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,4],[3,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,4],[3,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,5],[3,5],[4,5],[4,6],[6,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,5],[3,5],[4,6],[4,6],[5,6]],[[0,1],[0,1],[0,2],[0,2],[1,3],[2,4],[3,5],[3,6],[4,5],[4,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[0,3],[1,1],[2,2],[2,3]],[[0,1],[0,1],[0,2],[0,3],[0,3],[1,2],[1,2],[2,3]],[[0,1],[0,1],[0,2],[0,3],[0,3],[1,2],[1,3],[2,2]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,3],[4,4]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,4],[3,4]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,4],[3,4]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[1,2],[3,3],[4,4]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[1,2],[3,4],[3,4]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,3],[4,4]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,4],[3,4]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[2,3],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[2,3],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[2,3],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[2,5],[3,3],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[2,5],[3,3],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[2,5],[3,4],[3,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,2],[2,5],[3,4],[3,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,5],[2,2],[3,3],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,5],[2,2],[3,3],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,5],[2,2],[3,4],[3,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,5],[2,2],[3,4],[3,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,5],[2,3],[2,3],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,5],[2,3],[2,4],[3,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[0,4],[1,5],[2,3],[2,4],[3,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],[2,3]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],[2,4],[4,4]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[2,4],[3,4]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,4],[2,3],[2,3],[4,4]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,4],[2,3],[2,4],[3,4]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,4],[2,3],[3,4],[4,5],[5,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,4],[2,3],[3,5],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,4],[2,3],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,3],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,3],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,4],[3,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,4],[3,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,3],[3,4],[4,4]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,3],[3,4],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,3],[3,4],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,3],[3,4],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,3],[4,4]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,3],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,3],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,3],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,4],[3,4]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,4],[3,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,4],[3,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,4],[3,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,5],[3,5],[4,4],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,5],[3,5],[4,5],[4,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,5],[3,5],[4,6],[4,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,5],[3,6],[4,4],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,5],[3,6],[4,4],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,5],[3,6],[4,5],[4,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,2],[2,4],[3,5],[3,6],[4,5],[4,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,3],[1,3],[2,4],[2,4],[2,4]],[[0,1],[0,1],[0,2],[0,3],[1,3],[1,4],[2,3],[2,4],[2,4]],[[0,1],[0,1],[0,2],[0,3],[1,4],[1,4],[2,3],[2,3],[2,4]],[[0,1],[0,1],[0,2],[0,3],[1,4],[1,5],[2,2],[3,3],[4,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[1,4],[1,5],[2,2],[3,3],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[1,4],[1,5],[2,2],[3,4],[3,4],[5,5]],[[0,1],[0,1],[0,2],[0,3],[1,4],[1,5],[2,2],[3,4],[3,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[1,4],[1,5],[2,3],[2,3],[4,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[1,4],[1,5],[2,3],[2,4],[3,5],[4,5]],[[0,1],[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,4],[3,5],[3,5]],[[0,1],[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,3],[4,4]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,3],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,3],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,3],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,4],[3,4]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,4],[3,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,4],[3,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,4],[3,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,5],[3,5],[4,4],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,5],[3,5],[4,5],[4,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,5],[3,5],[4,6],[4,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,5],[3,6],[4,4],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,5],[3,6],[4,4],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,5],[3,6],[4,5],[4,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,2],[3,5],[3,6],[4,5],[4,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,3],[4,4]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,3],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,3],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,3],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,4],[3,4]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,4],[3,5],[4,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,4],[3,5],[4,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,4],[3,5],[4,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,5],[3,5],[4,4],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,5],[3,5],[4,5],[4,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,5],[3,5],[4,6],[4,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,5],[3,6],[4,4],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,5],[3,6],[4,4],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,5],[3,6],[4,5],[4,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,3],[2,5],[3,6],[4,5],[4,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,4],[3,5],[3,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,4],[3,5],[3,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,4],[3,5],[3,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,5],[3,4],[3,5],[5,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,5],[3,4],[3,6],[5,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,5],[3,4],[3,6],[5,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,5],[3,5],[3,5],[4,6],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,5],[3,5],[3,6],[4,5],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,5],[3,5],[3,6],[4,6],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,5],[3,6],[3,6],[4,5],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,4],[2,5],[3,6],[3,6],[4,6],[5,5]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,5],[2,5],[3,5],[3,6],[4,4],[6,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,5],[2,5],[3,5],[3,6],[4,6],[4,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,5],[2,5],[3,6],[3,6],[4,4],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,5],[2,5],[3,6],[3,6],[4,5],[4,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,5],[2,6],[3,5],[3,6],[4,4],[5,6]],[[0,1],[0,1],[0,2],[0,3],[1,4],[2,5],[2,6],[3,5],[3,6],[4,5],[4,6]],[[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,4],[4,5],[5,6],[5,7],[6,7],[6,7]],[[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,5],[4,5],[4,6],[5,7],[6,7],[6,7]],[[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,5],[4,6],[4,6],[5,7],[5,7],[6,7]],[[0,1],[0,1],[0,2],[1,2],[2,3],[3,4],[3,5],[4,6],[4,7],[5,6],[5,7],[6,7]],[[0,1],[0,1],[0,2],[1,3],[2,3],[2,3]],[[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[3,5],[4,5],[4,5]],[[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[3,5],[4,5],[4,6],[5,7],[6,7],[6,7]],[[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[3,5],[4,6],[4,6],[5,7],[5,7],[6,7]],[[0,1],[0,1],[0,2],[1,3],[2,3],[2,4],[3,5],[4,6],[4,7],[5,6],[5,7],[6,7]],[[0,1],[0,1],[0,2],[1,3],[2,4],[2,4],[3,5],[3,5],[4,5]],[[0,1],[0,1],[0,2],[1,3],[2,4],[2,4],[3,5],[3,5],[4,6],[5,7],[6,7],[6,7]],[[0,1],[0,1],[0,2],[1,3],[2,4],[2,4],[3,5],[3,6],[4,7],[5,6],[5,7],[6,7]],[[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,5]],[[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,6],[5,7],[6,7],[6,7]],[[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,4],[3,6],[4,5],[5,7],[6,7],[6,7]],[[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,4],[3,6],[4,7],[5,6],[5,7],[6,7]],[[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,5],[4,6],[5,7],[6,7]],[[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,6],[4,6],[5,7],[5,7]],[[0,1],[0,1],[0,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,6],[4,7],[5,6],[5,7]],[[0,1],[0,1],[0,3],[0,3],[0,3],[1,2],[1,2],[2,2]],[[0,1],[0,2],[0,2],[0,2],[0,3],[0,3],[1,1],[1,3]],[[0,1],[0,2],[0,2],[0,2],[0,3],[1,1],[1,3],[3,4],[4,4]],[[0,1],[0,2],[0,2],[0,2],[0,3],[1,1],[1,4],[3,3],[4,4]],[[0,1],[0,2],[0,2],[0,2],[0,3],[1,1],[1,4],[3,4],[3,4]],[[0,1],[0,2],[0,2],[0,2],[0,3],[1,3],[1,3],[1,4],[4,4]],[[0,1],[0,2],[0,2],[0,2],[0,3],[1,3],[1,4],[1,4],[3,4]],[[0,1],[0,2],[0,2],[0,2],[0,3],[1,4],[1,4],[1,4],[3,3]],[[0,1],[0,2],[0,2],[0,2],[1,3],[1,3],[1,3]],[[0,1],[0,2],[0,2],[0,2],[1,3],[1,3],[1,4],[3,4],[4,5],[5,5]],[[0,1],[0,2],[0,2],[0,2],[1,3],[1,3],[1,4],[3,5],[4,4],[5,5]],[[0,1],[0,2],[0,2],[0,2],[1,3],[1,3],[1,4],[3,5],[4,5],[4,5]],[[0,1],[0,2],[0,2],[0,2],[1,3],[1,4],[1,5],[3,3],[4,4],[5,5]],[[0,1],[0,2],[0,2],[0,2],[1,3],[1,4],[1,5],[3,3],[4,5],[4,5]],[[0,1],[0,2],[0,2],[0,2],[1,3],[1,4],[1,5],[3,4],[3,5],[4,5]],[[0,1],[0,2],[0,2],[0,3],[0,3],[1,1],[1,2],[3,4],[4,4]],[[0,1],[0,2],[0,2],[0,3],[0,3],[1,1],[1,4],[2,3],[4,4]],[[0,1],[0,2],[0,2],[0,3],[0,3],[1,1],[1,4],[2,4],[3,4]],[[0,1],[0,2],[0,2],[0,3],[0,3],[1,2],[1,3],[1,4],[4,4]],[[0,1],[0,2],[0,2],[0,3],[0,3],[1,2],[1,4],[1,4],[3,4]],[[0,1],[0,2],[0,2],[0,3],[0,3],[1,4],[1,4],[1,4],[2,3]],[[0,1],[0,2],[0,2],[0,3],[0,4],[1,1],[1,2],[3,3],[4,4]],[[0,1],[0,2],[0,2],[0,3],[0,4],[1,1],[1,2],[3,4],[3,4]],[[0,1],[0,2],[0,2],[0,3],[0,4],[1,1],[1,3],[2,3],[4,4]],[[0,1],[0,2],[0,2],[0,3],[0,4],[1,1],[1,3],[2,4],[3,4]],[[0,1],[0,2],[0,2],[0,3],[0,4],[1,2],[1,3],[1,3],[4,4]],[[0,1],[0,2],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[3,4]],[[0,1],[0,2],[0,2],[0,3],[0,4],[1,3],[1,3],[1,4],[2,4]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,3],[1,3]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,3],[1,4],[3,4],[4,5],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,3],[1,4],[3,5],[4,4],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,3],[1,4],[3,5],[4,5],[4,5]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,4],[1,4],[3,3],[4,5],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,4],[1,4],[3,4],[3,5],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,4],[1,4],[3,5],[3,5],[4,5]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,4],[1,5],[3,3],[4,4],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,4],[1,5],[3,3],[4,5],[4,5]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,4],[1,5],[3,4],[3,4],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,2],[1,4],[1,5],[3,4],[3,5],[4,5]],[[0,1],[0,2],[0,2],[0,3],[1,3],[1,4],[1,4],[2,3],[4,5],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,3],[1,4],[1,4],[2,4],[3,5],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,3],[1,4],[1,4],[2,5],[3,5],[4,5]],[[0,1],[0,2],[0,2],[0,3],[1,3],[1,4],[1,5],[2,3],[4,4],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,3],[1,4],[1,5],[2,3],[4,5],[4,5]],[[0,1],[0,2],[0,2],[0,3],[1,3],[1,4],[1,5],[2,4],[3,4],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,3],[1,4],[1,5],[2,4],[3,5],[4,5]],[[0,1],[0,2],[0,2],[0,3],[1,4],[1,4],[1,5],[2,3],[3,4],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,4],[1,4],[1,5],[2,3],[3,5],[4,5]],[[0,1],[0,2],[0,2],[0,3],[1,4],[1,4],[1,5],[2,4],[3,3],[5,5]],[[0,1],[0,2],[0,2],[0,3],[1,4],[1,4],[1,5],[2,4],[3,5],[3,5]],[[0,1],[0,2],[0,2],[0,3],[1,4],[1,4],[1,5],[2,5],[3,4],[3,5]],[[0,1],[0,2],[0,3],[0,3],[0,3],[1,1],[1,2],[2,2]],[[0,1],[0,2],[0,3],[0,3],[0,3],[1,2],[1,2],[1,2]],[[0,1],[0,2],[0,3],[0,3],[1,2],[1,3],[1,4],[2,4],[2,4]],[[0,1],[0,2],[0,3],[0,4],[0,5],[1,1],[2,2],[3,3],[4,4],[5,5]],[[0,1],[0,2],[0,3],[0,4],[0,5],[1,1],[2,2],[3,3],[4,5],[4,5]],[[0,1],[0,2],[0,3],[0,4],[0,5],[1,1],[2,2],[3,4],[3,5],[4,5]],[[0,1],[0,2],[0,3],[0,4],[0,5],[1,1],[2,3],[2,3],[4,5],[4,5]],[[0,1],[0,2],[0,3],[0,4],[0,5],[1,1],[2,3],[2,4],[3,5],[4,5]],[[0,1],[0,2],[0,3],[0,4],[0,5],[1,2],[1,2],[3,4],[3,5],[4,5]],[[0,1],[0,2],[0,3],[0,4],[0,5],[1,2],[1,3],[2,4],[3,5],[4,5]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,3],[4,4]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,3],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,3],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,3],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,4],[3,4]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,4],[3,5],[4,5],[5,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,4],[3,5],[4,6],[5,5],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,4],[3,5],[4,6],[5,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,5],[3,5],[4,5],[4,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,5],[3,5],[4,6],[4,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,2],[3,5],[3,6],[4,5],[4,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,3],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,3],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,3],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,4],[3,4]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,4],[3,5],[4,5],[5,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,4],[3,5],[4,6],[5,5],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,4],[3,5],[4,6],[5,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,5],[3,5],[4,5],[4,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,5],[3,5],[4,6],[4,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,5],[3,6],[4,5],[4,5],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,3],[2,5],[3,6],[4,5],[4,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,5],[2,5],[3,5],[3,6],[4,6],[4,6]],[[0,1],[0,2],[0,3],[0,4],[1,1],[2,5],[2,6],[3,5],[3,6],[4,5],[4,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,2],[3,4],[3,4]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,2],[3,4],[3,5],[4,5],[5,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,2],[3,4],[3,5],[4,6],[5,5],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,2],[3,4],[3,5],[4,6],[5,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,2],[3,5],[3,5],[4,5],[4,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,2],[3,5],[3,5],[4,6],[4,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,2],[3,5],[3,6],[4,5],[4,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[4,5],[5,5]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,5],[3,5],[4,5]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,5],[2,3],[4,4],[5,5]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,5],[2,3],[4,5],[4,5]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,5],[2,4],[3,4],[5,5]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,5],[2,4],[3,5],[4,5]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,3],[4,5],[4,5],[5,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,3],[4,5],[4,6],[5,5],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,3],[4,5],[4,6],[5,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,4],[3,4]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,4],[3,5],[4,5],[5,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,4],[3,5],[4,6],[5,5],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,4],[3,5],[4,6],[5,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,5],[3,5],[4,5],[4,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,5],[3,5],[4,6],[4,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,5],[3,6],[4,5],[4,5],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[2,5],[3,6],[4,5],[4,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,5],[2,5],[3,4],[3,5],[4,6],[6,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,5],[2,5],[3,4],[3,6],[4,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,5],[2,5],[3,5],[3,6],[4,6],[4,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,5],[2,6],[3,4],[3,5],[4,6],[5,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,5],[2,6],[3,5],[3,5],[4,6],[4,6]],[[0,1],[0,2],[0,3],[0,4],[1,2],[1,5],[2,6],[3,5],[3,6],[4,5],[4,6]],[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],[[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,5],[4,6],[4,7],[5,6],[5,7],[6,7]],[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,4],[3,5],[4,5]],[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,4],[3,6],[4,7],[5,6],[5,7],[6,7]],[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,6],[3,7],[4,6],[4,7],[5,6],[5,7]],[[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]],[[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,6],[3,5],[3,6],[4,7],[5,7],[6,7]],[[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,6],[3,5],[3,7],[4,7],[5,6],[6,7]],[[0,2],[0,2],[0,2],[0,3],[0,3],[1,1],[1,3],[1,4],[4,4]],[[0,2],[0,2],[0,2],[0,3],[0,3],[1,1],[1,4],[1,4],[3,4]],[[0,2],[0,2],[0,2],[0,3],[0,3],[1,3],[1,4],[1,4],[1,4]],[[0,2],[0,2],[0,2],[0,3],[0,4],[1,1],[1,3],[1,3],[4,4]],[[0,2],[0,2],[0,2],[0,3],[0,4],[1,1],[1,3],[1,4],[3,4]],[[0,2],[0,2],[0,2],[0,3],[0,4],[1,3],[1,3],[1,4],[1,4]],[[0,2],[0,2],[0,2],[0,3],[1,3],[1,3],[1,4],[1,4],[4,5],[5,5]],[[0,2],[0,2],[0,2],[0,3],[1,3],[1,3],[1,4],[1,5],[4,4],[5,5]],[[0,2],[0,2],[0,2],[0,3],[1,3],[1,3],[1,4],[1,5],[4,5],[4,5]],[[0,2],[0,2],[0,2],[0,3],[1,3],[1,4],[1,4],[1,4],[3,5],[5,5]],[[0,2],[0,2],[0,2],[0,3],[1,3],[1,4],[1,4],[1,5],[3,4],[5,5]],[[0,2],[0,2],[0,2],[0,3],[1,3],[1,4],[1,4],[1,5],[3,5],[4,5]],[[0,2],[0,2],[0,2],[0,3],[1,4],[1,4],[1,4],[1,5],[3,5],[3,5]],[[0,2],[0,2],[0,2],[0,3],[1,4],[1,4],[1,5],[1,5],[3,4],[3,5]],[[0,2],[0,2],[0,3],[0,3],[0,4],[1,1],[1,2],[1,3],[4,4]],[[0,2],[0,2],[0,3],[0,3],[0,4],[1,1],[1,2],[1,4],[3,4]],[[0,2],[0,2],[0,3],[0,3],[0,4],[1,1],[1,4],[1,4],[2,3]],[[0,2],[0,2],[0,3],[0,3],[0,4],[1,2],[1,3],[1,4],[1,4]],[[0,2],[0,2],[0,3],[0,3],[1,2],[1,3],[1,4],[1,4],[4,5],[5,5]],[[0,2],[0,2],[0,3],[0,3],[1,2],[1,3],[1,4],[1,5],[4,4],[5,5]],[[0,2],[0,2],[0,3],[0,3],[1,2],[1,3],[1,4],[1,5],[4,5],[4,5]],[[0,2],[0,2],[0,3],[0,3],[1,2],[1,4],[1,4],[1,5],[3,4],[5,5]],[[0,2],[0,2],[0,3],[0,3],[1,2],[1,4],[1,4],[1,5],[3,5],[4,5]],[[0,2],[0,2],[0,3],[0,3],[1,4],[1,4],[1,5],[1,5],[2,4],[3,5]],[[0,2],[0,2],[0,3],[0,4],[1,2],[1,3],[1,3],[1,4],[4,5],[5,5]],[[0,2],[0,2],[0,3],[0,4],[1,2],[1,3],[1,3],[1,5],[4,4],[5,5]],[[0,2],[0,2],[0,3],[0,4],[1,2],[1,3],[1,3],[1,5],[4,5],[4,5]],[[0,2],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[1,5],[3,4],[5,5]],[[0,2],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[1,5],[3,5],[4,5]],[[0,2],[0,2],[0,3],[0,4],[1,2],[1,3],[1,5],[1,5],[3,4],[4,5]],[[0,2],[0,2],[0,3],[0,4],[1,2],[1,3],[1,5],[1,5],[3,5],[4,4]],[[0,2],[0,2],[0,3],[0,4],[1,3],[1,4],[1,5],[1,5],[2,3],[4,5]],[[0,2],[0,2],[0,3],[0,4],[1,3],[1,4],[1,5],[1,5],[2,5],[3,4]],[[0,2],[0,3],[0,4],[0,5],[1,2],[1,3],[1,4],[1,5],[2,3],[4,5]]]
#for edges in cv:
#	draw_graph(edges)
# Looked Just OK But Not Rigourously Benchmarked And Tested
if cv==[]:
	z=0
	av=[]
	for a in range(13):
		for a00 in range(13-a):
			for a01 in range(13-a-a00):
				print(a01)
				for a02 in range(13-a-a00-a01):
					for a03 in range(13-a-a00-a01-a02):
						for a04 in range(13-a-a00-a01-a02-a03):
							for a05 in range(13-a-a00-a01-a02-a03-a04):
								for a06 in range(13-a-a00-a01-a02-a03-a04-a05):
									for a07 in range(13-a-a00-a01-a02-a03-a04-a05-a06):
										if 2*a00+a01+a02+a03+a04+a05+a06+a07>=3:
											for a11 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07):
												for a12 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11):
													for a13 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12):
														for a14 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13):
															for a15 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14):
																for a16 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15):
																	for a17 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16):
																		if 2*a00+a01+a02+a03+a04+a05+a06+a07>=a01+2*a11+a12+a13+a14+a15+a16+a17 and ((a01+2*a11+a12+a13+a14+a15+a16+a17==0 and 12-a<=1+4) or a01+2*a11+a12+a13+a14+a15+a16+a17>=3):
																			for a22 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17):
																				for a23 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22):
																					for a24 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23):
																						for a25 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24):
																							av.append([a,a00,a01,a02,a03,a04,a05,a06,a07,a11,a12,a13,a14,a15,a16,a17,a22,a23,a24,a25]) # Avoids 20 Nesting Limit
	print(len(av))
	cv=[] # Minimised Representations
	llll=[[0 for a in range(8)] for b in range(8)]
	for ind1 in range(0,len(av),1000000): # To Preserve Memory. Testing Starting At 11:27 CST For Timing Purposes On RAM Issues 19.28 GB At 11:33 CST
		bv=[]
		for ind2 in range(ind1,min(ind1+1000000,len(av))):
			dude=av[ind2]
			a=dude[0]
			a00=dude[1]
			a01=dude[2]
			a02=dude[3]
			a03=dude[4]
			a04=dude[5]
			a05=dude[6]
			a06=dude[7]
			a07=dude[8]
			a11=dude[9]
			a12=dude[10]
			a13=dude[11]
			a14=dude[12]
			a15=dude[13]
			a16=dude[14]
			a17=dude[15]
			a22=dude[16]
			a23=dude[17]
			a24=dude[18]
			a25=dude[19]
			for a26 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25):
				for a27 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26):
					if a01+2*a11+a12+a13+a14+a15+a16+a17>=a02+a12+2*a22+a23+a24+a25+a26+a27 and ((a02+a12+2*a22+a23+a24+a25+a26+a27==0 and 12-a<=2+4) or a02+a12+2*a22+a23+a24+a25+a26+a27>=3):
						for a33 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27):
							for a34 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33):
								for a35 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34):
									for a36 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35):
										for a37 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36):
											if a02+a12+2*a22+a23+a24+a25+a26+a27>=a03+a13+a23+2*a33+a34+a35+a36+a37 and ((a03+a13+a23+2*a33+a34+a35+a36+a37==0 and 12-a<=3+4) or a03+a13+a23+2*a33+a34+a35+a36+a37>=3):
												for a44 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36-a37):
													for a45 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36-a37-a44):
														for a46 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36-a37-a44-a45):
															for a47 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36-a37-a44-a45-a46):
																if a03+a13+a23+2*a33+a34+a35+a36+a37>=a04+a14+a24+a34+2*a44+a45+a46+a47 and ((a04+a14+a24+a34+2*a44+a45+a46+a47==0 and 12-a<=4+4) or a04+a14+a24+a34+2*a44+a45+a46+a47>=3):
																	bv.append([a,a00,a01,a02,a03,a04,a05,a06,a07,a11,a12,a13,a14,a15,a16,a17,a22,a23,a24,a25,a26,a27,a33,a34,a35,a36,a37,a44,a45,a46,a47])
		print(ind1,len(av),len(bv),z)
		y=0
		for dude in bv:
			y+=1
			if(y%10000==0):
				print(y)
			a=dude[0]
			a00=dude[1]
			a01=dude[2]
			a02=dude[3]
			a03=dude[4]
			a04=dude[5]
			a05=dude[6]
			a06=dude[7]
			a07=dude[8]
			a11=dude[9]
			a12=dude[10]
			a13=dude[11]
			a14=dude[12]
			a15=dude[13]
			a16=dude[14]
			a17=dude[15]
			a22=dude[16]
			a23=dude[17]
			a24=dude[18]
			a25=dude[19]
			a26=dude[20]
			a27=dude[21]
			a33=dude[22]
			a34=dude[23]
			a35=dude[24]
			a36=dude[25]
			a37=dude[26]
			a44=dude[27]
			a45=dude[28]
			a46=dude[29]
			a47=dude[30]
			for a55 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36-a37-a44-a45-a46-a47):
				for a56 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36-a37-a44-a45-a46-a47-a55):
					for a57 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36-a37-a44-a45-a46-a47-a55-a56):
						if a04+a14+a24+a34+2*a44+a45+a46+a47>=a05+a15+a25+a35+a45+2*a55+a56+a57 and ((a05+a15+a25+a35+a45+2*a55+a56+a57==0 and 12-a<=5+4) or a05+a15+a25+a35+a45+2*a55+a56+a57>=3):
							for a66 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36-a37-a44-a45-a46-a47-a55-a56-a57):
								for a67 in range(13-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36-a37-a44-a45-a46-a47-a55-a56-a57-a66):
									if a05+a15+a25+a35+a45+2*a55+a56+a57>=a06+a16+a26+a36+a46+a56+2*a66+a67 and ((a06+a16+a26+a36+a46+a56+2*a66+a67==0 and 12-a<=6+4) or a06+a16+a26+a36+a46+a56+2*a66+a67>=3):
										a77=12-a-a00-a01-a02-a03-a04-a05-a06-a07-a11-a12-a13-a14-a15-a16-a17-a22-a23-a24-a25-a26-a27-a33-a34-a35-a36-a37-a44-a45-a46-a47-a55-a56-a57-a66-a67
										if a06+a16+a26+a36+a46+a56+2*a66+a67>=a07+a17+a27+a37+a47+a57+a67+2*a77 and ((a07+a17+a27+a37+a47+a57+a67+2*a77==0 and 12-a<=7+4) or a07+a17+a27+a37+a47+a57+a67+2*a77>=3):
											edges=[]
											for x in range(a00):
												edges.append([0,0])
											for x in range(a01):
												edges.append([0,1])
											for x in range(a02):
												edges.append([0,2])
											for x in range(a03):
												edges.append([0,3])
											for x in range(a04):
												edges.append([0,4])
											for x in range(a05):
												edges.append([0,5])
											for x in range(a06):
												edges.append([0,6])
											for x in range(a07):
												edges.append([0,7])
											for x in range(a11):
												edges.append([1,1])
											for x in range(a12):
												edges.append([1,2])
											for x in range(a13):
												edges.append([1,3])
											for x in range(a14):
												edges.append([1,4])
											for x in range(a15):
												edges.append([1,5])
											for x in range(a16):
												edges.append([1,6])
											for x in range(a17):
												edges.append([1,7])
											for x in range(a22):
												edges.append([2,2])
											for x in range(a23):
												edges.append([2,3])
											for x in range(a24):
												edges.append([2,4])
											for x in range(a25):
												edges.append([2,5])
											for x in range(a26):
												edges.append([2,6])
											for x in range(a27):
												edges.append([2,7])
											for x in range(a33):
												edges.append([3,3])
											for x in range(a34):
												edges.append([3,4])
											for x in range(a35):
												edges.append([3,5])
											for x in range(a36):
												edges.append([3,6])
											for x in range(a37):
												edges.append([3,7])
											for x in range(a44):
												edges.append([4,4])
											for x in range(a45):
												edges.append([4,5])
											for x in range(a46):
												edges.append([4,6])
											for x in range(a47):
												edges.append([4,7])
											for x in range(a55):
												edges.append([5,5])
											for x in range(a56):
												edges.append([5,6])
											for x in range(a57):
												edges.append([5,7])
											for x in range(a66):
												edges.append([6,6])
											for x in range(a67):
												edges.append([6,7])
											for x in range(a77):
												edges.append([7,7])
											# Should Check If Connected And Then Maybe Add In Minimal Isomorphic Representation To A List Which We Later Sort And Uniquify
											if is_graph_connected(edges):
												maxx=0 # Find Maximum Node In Graph
												mult=[0 for aaa in range(8)]
												multself=[0 for aaa in range(8)]
												for edge in edges:
													mult[edge[0]]+=1
													mult[edge[1]]+=1
													if edge[0]==edge[1]:
														multself[edge[0]]+=1
												for bbb in range(1,8):
													if mult[bbb]>0:
														maxx=bbb
												# Now maxx Is Maximum
												nv=maxx+1 # Number Of Vertices In Graph Thus Far
												selfmults=0
												for aaa in range(maxx+1):
													selfmults+=multself[aaa]
												if nv+selfmults<=12: # Still Potentially Possible
													#print(mult)
													# Now Compute The Minimal Representation And Add It To cv
													# Can Prune Here To 10 11 12 Case But Eh Do Not Really Care That Much Eh
													#minpermutation=[]
													#for permutation in permutations[maxx]:
													#	edgesalt=[]
													#	for edge in edges:
													#		aaav=[]
													#		aaav.append(permutation[edge[0]])
													#		aaav.append(permutation[edge[1]])
													#		aaav.sort()
													#		edgesalt.append(aaav)
													#	edgesalt.sort()
													#	if minpermutation==[] or edgesalt<minpermutation:
													#		minpermutation=edgesalt
													#cv.append(minpermutation)
													# Discover Break Points Like 0 And maxx+1 Ensured But Check Other Potential Ones And Then Do It Via Some Left Right Dynamic Programme Or Something Ugh
													# Can Maybe Somehow Also Force That Uh The Degrees From The First Node To The Rest Inside Each Group Must Be Monotone Decreasing Or Something By Checking That Condition Too Or Something Ugh
													breaks=[0]
													for aaaa in range(1,maxx+1):
														if mult[aaaa]!=mult[aaaa-1]:
															breaks.append(aaaa)
													breaks.append(maxx+1)
													rangers=[]
													for aaaa in range(1,len(breaks)):
														rangers.append([breaks[aaaa-1],breaks[aaaa]-1])
													# Oh OKOKOK So Here Can Instead Verify That Already The Uh Lead In Each Range To The Other Dudes Is Monotone Decreasing Before Then Entering The Usual Permutation Thingy Could Work Here Maybe Or Even Further Pruning Inside These Ranges
													llll[0][1]=a01
													llll[0][2]=a02
													llll[0][3]=a03
													llll[0][4]=a04
													llll[0][5]=a05
													llll[0][6]=a06
													llll[0][7]=a07
													llll[1][2]=a12
													llll[1][3]=a13
													llll[1][4]=a14
													llll[1][5]=a15
													llll[1][6]=a16
													llll[1][7]=a17
													llll[2][3]=a23
													llll[2][4]=a24
													llll[2][5]=a25
													llll[2][6]=a26
													llll[2][7]=a27
													llll[3][4]=a34
													llll[3][5]=a35
													llll[3][6]=a36
													llll[3][7]=a37
													llll[4][5]=a45
													llll[4][6]=a46
													llll[4][7]=a47
													llll[5][6]=a56
													llll[5][7]=a57
													llll[6][7]=a67
													yyyy=1
													for ranger in rangers:
														if ranger[1]-ranger[0]>=2:
															for zzzz in range(ranger[0]+2,ranger[1]+1):
																if llll[ranger[0]][zzzz]>llll[ranger[0]][zzzz-1]:
																	yyyy=0
													if yyyy==1:
														perms=[]
														for lolol in permutationsrange[rangers[0][0]][rangers[0][1]]:
															perms.append(lolol)
														for aaaa in range(1,len(rangers)):
															permsalt=[]
															for perm in perms:
																for lolol in permutationsrange[rangers[aaaa][0]][rangers[aaaa][1]]:
																	aaaaa=copy.deepcopy(perm)
																	for lololol in lolol:
																		aaaaa.append(lololol)
																	permsalt.append(aaaaa)
															perms=permsalt
														minpermutation=[]
														for permutation in perms:
															edgesalt=[]
															for edge in edges:
																aaav=[]
																aaav.append(permutation[edge[0]])
																aaav.append(permutation[edge[1]])
																aaav.sort()
																edgesalt.append(aaav)
															edgesalt.sort()
															if minpermutation==[] or edgesalt<minpermutation:
																minpermutation=edgesalt
														cv.append(minpermutation)
														z+=1
		for ind2 in range(ind1,min(ind1+1000000,len(av))):
			av[ind2]=[] # Could Save Some Memory
	av=[] # Could Save Some More Memory
	print(z) # Number Of Cases To Think About How To Reduce Under Graph Isomorphism Uh It Was Around 1000000 So... Need To Optimise Further Uh Ensure Connected
	# Around 1080264 Is Interesting Enough Can Now Go Back And Remove If Number Of Needed Is Too High And Also Repermute Naively To Minimise Representation In Edges Then Sort And Uniquify Eh Maybe Want To Try And Do It A Different Way By Permuting Only Such That The Monotone Decreasing Degrees Holds
	cv.sort()
	dv=[cv[0]]
	for a in range(1,len(cv)):
		if cv[a]!=cv[a-1]:
			dv.append(cv[a])
	cv=dv
#print(len(cv)) # Number Of Distinct Graphs 1204
#print(cv) # To Store Later If Possible In A .txt File Or Right Here Might Be Even Better Depending On Size
L=[[] for a in range(15)]
L[10]=np.array([
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0]
])
L[11]=np.array([
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0]
])
L[12]=np.array([
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0]
])
L[13]=np.array([
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0]
])
L[14]=np.array([
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0]
])
# Time To Write A General Bash Here In Terms Of The Dudes And Monitour In Terms Of minnn
# Recall It Is Number Of Dudes We Are Partitioning In To 1 Edge Would Be To The [Number][0] Not [Number][1]
print(cv[1165]) # [[0, 1], [0, 2], [0, 3], [1, 2], [1, 4], [2, 5], [3, 4], [3, 6], [4, 7], [5, 6], [5, 7], [6, 7]]
# Interesting enough this would be a uh 3 regular graph here might want to try instead of adding 4 to the 14 case for a 18 evaluation uh instead doing uh 5 to the 12 case for 17 or 5 to 13 for 18 or whatever uh uh uh uh unclear uh eh...
# From https://oeis.org/A068934 And https://www.mathe2.uni-bayreuth.de/markus/REGGRAPHS/10_3_3.html#:~:text=Connected%203%2Dregular%20Graphs%20on%2010%20Vertices%20*,%2313%2C%20%2314%2C%20%2315%2C%20%2316%2C%20%2317%2C%20%2318%2C%20%2319.
dv=[[[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,4],[4,5],[5,6],[5,7],[6,8],[6,9],[7,8],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,5],[4,5],[4,6],[5,7],[6,8],[6,9],[7,8],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,5],[4,6],[4,7],[5,6],[5,8],[6,9],[7,8],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,5],[4,6],[4,7],[5,8],[5,9],[6,7],[6,8],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,2],[1,3],[2,4],[3,5],[4,6],[4,7],[5,8],[5,9],[6,8],[6,9],[7,8],[7,9]],
[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,4],[3,6],[4,7],[5,6],[5,8],[6,9],[7,8],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,4],[3,6],[4,7],[5,8],[5,9],[6,7],[6,8],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,4],[3,6],[4,7],[5,8],[5,9],[6,8],[6,9],[7,8],[7,9]],
[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,6],[3,7],[4,6],[4,7],[5,8],[5,9],[6,8],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,6],[3,7],[4,6],[4,8],[5,6],[5,9],[7,8],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,6],[3,7],[4,6],[4,8],[5,7],[5,8],[6,9],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,6],[3,7],[4,6],[4,8],[5,7],[5,9],[6,8],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,2],[1,4],[2,5],[3,6],[3,7],[4,6],[4,8],[5,7],[5,9],[6,9],[7,8],[8,9]],
[[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[4,8],[5,9],[6,8],[6,9],[7,8],[7,9]],
[[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,6],[3,5],[3,7],[4,8],[5,9],[6,7],[6,8],[7,9],[8,9]],
[[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,6],[3,5],[3,7],[4,8],[5,9],[6,7],[6,9],[7,8],[8,9]],
[[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,6],[3,5],[3,7],[4,8],[5,9],[6,8],[6,9],[7,8],[7,9]],
[[0,1],[0,2],[0,3],[1,4],[1,5],[2,4],[2,6],[3,7],[3,8],[4,7],[5,8],[5,9],[6,8],[6,9],[7,9]],
[[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,6],[4,8],[5,7],[5,9],[6,9],[7,8]]]
minedgesset=[]
minnn=20
for a in range(13,14):
	yyyyy=0
	for edges in dv:
		print(a,yyyyy)
		yyyyy+=1
		# See If We Can Split This Dude Which Is A Set Of Edges In To Having a Dudes Total
		# By Ensuring Each Self Edge Must Have >=1 Dude Inside Of It
		# Other Than That Should Be Good To Go
		maxxx=0
		for edge in edges:
			maxxx=max(maxxx,edge[0])
			maxxx=max(maxxx,edge[1])
		for partition in partition_list[a-(maxxx+1)][len(edges)-1]: # Actually Represents A Partition In To len(edges) Parts
			for aa in range(a):
				for bb in range(a):
					L[a][aa][bb]=0 # Clear It Out For Reusage
			prev=maxxx+1 # Starting Point For Next Drop Of Vertices In To The Mix
			yyyy=1 # To Nullify Later On Self Edge Existence In Final Graph
			for aa in range(len(edges)):
				av=[edges[aa][0]]
				for bb in range(prev,prev+partition[aa]):
					av.append(bb)
				prev+=partition[aa]
				av.append(edges[aa][1])
				for w in range(len(av)-1):
					L[a][av[w]][av[w]]+=1
					L[a][av[w+1]][av[w+1]]+=1
					L[a][av[w]][av[w+1]]-=1
					L[a][av[w+1]][av[w]]-=1
					if av[w+1]==av[w]:
						yyyy=0
						break
				if yyyy==0:
					break
			if yyyy==1:
				lol=compute_resistances(L[a])
				for b1 in range(-1,a):
					for b2 in range(b1,a):
						if not (b1>=0 and b1==b2):
							numnegone=0
							if b1==-1:
								numnegone+=1
							if b2==-1:
								numnegone+=1
							if a+numnegone==12+2:
								av=[]
								z=1
								for a1 in range(a):
									for a2 in range(a1+1,a):
										if a1!=b1 and a2!=b1 and a1!=b2 and a2!=b2:
											av.append(lol[a1][a2])
								av.sort()
								for a1 in range(66-1):
									if av[a1+1]-av[a1]<0.00001:
										z=0
								for a1 in range(a):
									ccc=0
									for a2 in range(a):
										if L[a][a1][a2]!=0:
											ccc+=1
									if ccc<3:
										z=0
								if z==1:
									totaldegree=0
									for www in range(a):
										totaldegree+=L[a][www][www]
									if totaldegree//2<minnn:
										minedgesset=[]
										minnn=totaldegree//2
										print("New Minimum After This Following Round Is:",minnn)
									if totaldegree//2==minnn:
										newedges=[]
										for a1 in range(a):
											for a2 in range(a1+1,a):
												if L[a][a1][a2]<0:
													for a3 in range(abs(L[a][a1][a2])):
														newedges.append([a1+1,a2+1])
										minedgesset.append(newedges)
									print(totaldegree//2)
									print("Yes")
									print(L[a])
									print(is_planar_graph(newedges),b1,b2,av)
print(minnn)
wwww=0
minedgesnonplanar=[]
minedgesplanar=[]
for minedges in minedgesset:
	draw_graph(minedges)
	print(minedges)
	if is_planar_graph(minedges):
		wwww+=1
		minedgesplanar.append(minedges)
	else:
		minedgesnonplanar.append(minedges)
print(wwww)
from networkx.algorithms import isomorphism
avv=[[0 for a in range(len(minedgesplanar))] for b in range(len(minedgesplanar))]
for a in range(len(minedgesplanar)):
	for b in range(len(minedgesplanar)):
		G1=nx.Graph()
		G2=nx.Graph()
		edges1=minedgesplanar[a]
		edges2=minedgesplanar[b]
		G1.add_edges_from(edges1)
		G2.add_edges_from(edges2)
		GM = isomorphism.GraphMatcher(G1, G2)
		if GM.is_isomorphic():
			avv[a][b]=1
print(avv) # I See So The First 4 And Last 6 Are Isomorphic Here Allegedly Means Maybe The 14 4 Case Will Produce A Final Planar One Uh We Shall See Uh
print("Example Nonplanar Graph For 12 With 18 Edges:")
print(minedgesnonplanar[0])
print("3 Planar Graphs For 12 With 18 Edges:")
print(minedgesplanar[0]) # [0.5360904187002312, 0.5681993321346005, 0.5699974312869256, 0.5774466992036986, 0.6203442075520162, 0.6385820703827383, 0.641921397379913, 0.6439763678397126, 0.6555355766760855, 0.6617004880554842, 0.6902132031852044, 0.7269458001541226, 0.7369637811456456, 0.7403031081428203, 0.7639352684305163, 0.7811456460313384, 0.7901361417929617, 0.8001541227844853, 0.834318006678654, 0.8774723863344466, 0.8918571795530441, 0.9645517595684562, 0.979193424094529, 0.9835602363216033, 1.0213203185204218, 1.0303108142820456, 1.0339070125866943, 1.0439249935782173, 1.0446956075006413, 1.047007449267916, 1.0524017467248905, 1.0547135884921661, 1.074749550475212, 1.0788594913948113, 1.0911893141536084, 1.0994091959928074, 1.1068584639095809, 1.111225276136656, 1.113793989211405, 1.1199589005908033, 1.1638838941690208, 1.1787824300025687, 1.1795530439249933, 1.1857179553043928, 1.201387105060365, 1.2309273054199834, 1.2447983560236324, 1.2596968918571794, 1.2748522989982014, 1.2905214487541743, 1.298998201900847, 1.3059337272026703, 1.3295658874903662, 1.3406113537117896, 1.457487798612895, 1.4662214230670438, 1.4713588492165421, 1.4824043154379651, 1.484973028512714, 1.4870279989725137, 1.493963524274338, 1.5088620601078853, 1.5186231697919332, 1.519907526329308, 1.5992807603390702, 1.6031338299511946]
print(minedgesplanar[9]) # [0.5534403045961385, 0.5553440304596139, 0.5577916779983685, 0.5751971716072889, 0.5806363883600761, 0.5885232526516182, 0.641827576828937, 0.6510742453086755, 0.6796301332608106, 0.687516997552353, 0.7032907261354364, 0.7106336687516999, 0.7340223007886868, 0.7386456350285553, 0.7848789774272502, 0.8550448735382107, 0.8623878161544741, 0.8855044873538219, 0.9246668479738921, 0.9249388088115312, 0.9420723415828123, 0.9616535218928476, 0.966276856132717, 0.9670927386456349, 0.9738917595866194, 0.9975523524612456, 1.0016317650258368, 1.013870002719609, 1.030187652977971, 1.050312754963285, 1.0641827576828942, 1.0813162904541747, 1.0832200163176509, 1.1030731574653254, 1.1422355180853958, 1.142507478923035, 1.1604568942072344, 1.1661680717976615, 1.1792221920043526, 1.1887408213217303, 1.1936361163992386, 1.1966276856132718, 1.2012510198531414, 1.2031547457166178, 1.2521076964917055, 1.2567310307315749, 1.281479466956758, 1.2901822137612184, 1.299156921403318, 1.313026924122926, 1.3152026108240413, 1.3184661408757137, 1.3891759586619532, 1.4163720424258903, 1.4207234158281203, 1.4340494968724509, 1.4432961653521896, 1.4446559695403869, 1.4519989121566494, 1.4544465596954042, 1.4571661680717978, 1.4647810715256997, 1.4927930378025571, 1.5036714713081325, 1.5123742181125928, 1.519717160728856]
# Later I Got Something Like Huh Allegedly Planar Solution [0.5556089358635603, 0.5729041556569783, 0.576507326447274, 0.6036512130674994, 0.6207062214748982, 0.6363199615661784, 0.6447273600768678, 0.6593802546240696, 0.6805188565938032, 0.6913283689646894, 0.7086235887581077, 0.7103050684602448, 0.7170309872687961, 0.7432140283449438, 0.8054287773240459, 0.8205620946432859, 0.8897429738169583, 0.8993514292577468, 0.9173672832092241, 0.9452318039875097, 0.9512370886380019, 0.9627672351669478, 0.980062454960366, 0.9877492193129959, 1.0172952197934186, 1.0223396588998326, 1.050204179678117, 1.0557290415565697, 1.0665385539274561, 1.0684602450156142, 1.069180879173673, 1.0723036271919288, 1.0893586355993272, 1.0927215950036047, 1.1357194331011289, 1.1443670429978383, 1.152053807350469, 1.1551765553687254, 1.1664664905116497, 1.173432620706222, 1.1789574825846745, 1.1897669949555612, 1.1940907999039152, 1.205140523660821, 1.2106653855392757, 1.2193129954359834, 1.224117223156378, 1.2286812394907516, 1.2378092721595004, 1.2450156137400914, 1.2462166706701905, 1.2469373048282484, 1.2488589959164065, 1.2541436464088391, 1.2625510449195287, 1.2627912563055492, 1.2827288013451843, 1.297141484506366, 1.3026663463848194, 1.311554167667548, 1.3454239730963244, 1.3814556809992797, 1.3850588517895752, 1.38890223396589, 1.3987509007926975, 1.4009128032668758]
# Think 10 Must Be Swapped With 13 In This Example Which Is Currently Wrong
# [[1, 2], [1, 3], [1, 4], [2, 3], [2, 5], [3, 6], [4, 7], [4, 8], [5, 7], [5, 9], [6, 8], [6, 11], [7, 12], [8, 9], [9, 13], [10, 11], [10, 12], [10, 13]]
# Interesting Enough Stuff
# Think 10 Must Be Swapped With 13 In This Example Which Is Currently Wrong
# [[1, 2], [1, 3], [1, 4], [2, 3], [2, 5], [3, 6], [4, 5], [4, 7], [5, 8], [6, 9], [6, 11], [7, 8], [7, 9], [8, 12], [9, 13], [10, 11], [10, 12], [10, 13]]
# Think 2 Must Be Swapped With 13 In This Example Which Is Currently Wrong
# [[1, 3], [1, 4], [1, 11], [2, 11], [2, 12], [2, 13], [3, 6], [3, 12], [4, 7], [4, 8], [5, 7], [5, 9], [5, 13], [6, 8], [6, 10], [7, 9], [8, 10], [9, 10]]
# OKOKOK So Like
# Example Nonplanar Graph With 18 Edges
# [[1, 2], [1, 3], [1, 4], [2, 3], [2, 5], [3, 6], [4, 7], [4, 8], [5, 7], [5, 9], [6, 8], [6, 11], [7, 12], [8, 9], [9, 10], [13, 11], [13, 12], [13, 10]]
# The 3 Planar Graphs With 18 Edges
# [[1, 2], [1, 3], [1, 4], [2, 3], [2, 5], [3, 6], [4, 5], [4, 7], [5, 8], [6, 9], [6, 11], [7, 8], [7, 9], [8, 12], [9, 10], [13, 11], [13, 12], [13, 10]]
# [[1, 3], [1, 4], [1, 11], [13, 11], [13, 12], [13, 2], [3, 6], [3, 12], [4, 7], [4, 8], [5, 7], [5, 9], [5, 2], [6, 8], [6, 10], [7, 9], [8, 10], [9, 10]]
edgesalt=[[0,2],[0,8],[0,9],[1,2],[1,4],[1,8],[2,5],[3,9],[3,10],[3,11],[3,12],[4,7],[4,10],[5,6],[5,7],[6,7],[6,11],[8,12]]
for a in range(len(edgesalt)):
	edgesalt[a][0]+=1
	edgesalt[a][1]+=1
edges=[]
for edge in edgesalt:
	edged=[]
	if edge[0]==4:
		edged.append(13)
	elif edge[0]==13:
		edged.append(4)
	else:
		edged.append(edge[0])
	if edge[1]==4:
		edged.append(13)
	elif edge[1]==13:
		edged.append(4)
	else:
		edged.append(edge[1])
	edged.sort()
	edges.append(edged)
edges.sort()
edges1=[[1, 2], [1, 3], [1, 4], [2, 3], [2, 5], [3, 6], [4, 5], [4, 7], [5, 8], [6, 9], [6, 11], [7, 8], [7, 9], [8, 12], [9, 10], [13, 11], [13, 12], [13, 10]]
edges2=[[1, 3], [1, 4], [1, 11], [13, 11], [13, 12], [13, 2], [3, 6], [3, 12], [4, 7], [4, 8], [5, 7], [5, 9], [5, 2], [6, 8], [6, 10], [7, 9], [8, 10], [9, 10]]
G1=nx.Graph()
G2=nx.Graph()
G1.add_edges_from(edges)
G2.add_edges_from(edges1)
GM = isomorphism.GraphMatcher(G1, G2)
if GM.is_isomorphic():
	print("Bad")
G1=nx.Graph()
G2=nx.Graph()
G1.add_edges_from(edges)
G2.add_edges_from(edges2)
GM = isomorphism.GraphMatcher(G1, G2)
if GM.is_isomorphic():
	print("Bad")
if is_graph_connected(edges) and is_planar_graph(edges):
	draw_graph(edges)
	print(edges)
# [[1, 3], [1, 9], [1, 10], [2, 3], [2, 5], [2, 9], [3, 6], [4, 9], [4, 13], [5, 8], [5, 11], [6, 7], [6, 8], [7, 8], [7, 12], [10, 13], [11, 13], [12, 13]]
print("Find The Uniqe Other One From Here Maybe:")
minedgesset=[]
minnn=20
oooo=0
for a in range(13,14):
	yyyyy=0
	for ppp in cv[1150:]: # Modify By Adding In An Edge Or Subtracting Out An Edge And Uh Then Adding In A New Node To Those 2 Vertices Which Also Goes To One Other Vertex Eh Could Work Here Maybe
	# Already Checked First 26 So Can Skip On Future Runs
		print(oooo)
		oooo+=1
		edgess=[]
		maxxx=0
		for edge in ppp:
			maxxx=max(maxxx,edge[0])
			maxxx=max(maxxx,edge[1])
		for aaa in range(maxxx+1):
			for bbb in range(aaa,maxxx+1):
				ccc=copy.deepcopy(ppp)
				ccc.append([aaa,bbb])
				edgess.append(ccc)
		for edge in ppp:
			for bbb in range(maxxx+1):
				ccc=copy.deepcopy(ppp)
				ccc.append([bbb,maxxx+1])
				ccc.append([edge[0],maxxx+1])
				ccc.append([edge[1],maxxx+1])
				ccc.remove(edge)
				edgess.append(ccc)
		for edges in edgess:
			print(a,yyyyy)
			yyyyy+=1
			# See If We Can Split This Dude Which Is A Set Of Edges In To Having a Dudes Total
			# By Ensuring Each Self Edge Must Have >=1 Dude Inside Of It
			# Other Than That Should Be Good To Go
			maxxx=0
			for edge in edges:
				maxxx=max(maxxx,edge[0])
				maxxx=max(maxxx,edge[1])
			if a-(maxxx+1)>=0 and a-(maxxx+1)<len(partition_list) and len(edges)-1>=0 and len(edges)-1<len(partition_list[0]):
				for partition in partition_list[a-(maxxx+1)][len(edges)-1]: # Actually Represents A Partition In To len(edges) Parts
					for aa in range(a):
						for bb in range(a):
							L[a][aa][bb]=0 # Clear It Out For Reusage
					prev=maxxx+1 # Starting Point For Next Drop Of Vertices In To The Mix
					yyyy=1 # To Nullify Later On Self Edge Existence In Final Graph
					for aa in range(len(edges)):
						av=[edges[aa][0]]
						for bb in range(prev,prev+partition[aa]):
							av.append(bb)
						prev+=partition[aa]
						av.append(edges[aa][1])
						for w in range(len(av)-1):
							L[a][av[w]][av[w]]+=1
							L[a][av[w+1]][av[w+1]]+=1
							L[a][av[w]][av[w+1]]-=1
							L[a][av[w+1]][av[w]]-=1
							if av[w+1]==av[w]:
								yyyy=0
								break
						if yyyy==0:
							break
					if yyyy==1:
						lol=compute_resistances(L[a])
						for b1 in range(-1,a):
							for b2 in range(b1,a):
								if not (b1>=0 and b1==b2):
									numnegone=0
									if b1==-1:
										numnegone+=1
									if b2==-1:
										numnegone+=1
									if a+numnegone==12+2:
										av=[]
										z=1
										for a1 in range(a):
											for a2 in range(a1+1,a):
												if a1!=b1 and a2!=b1 and a1!=b2 and a2!=b2:
													av.append(lol[a1][a2])
										av.sort()
										for a1 in range(66-1):
											if av[a1+1]-av[a1]<0.00001:
												z=0
										for a1 in range(a):
											ccc=0
											for a2 in range(a):
												if L[a][a1][a2]!=0:
													ccc+=1
											if ccc<3:
												z=0
										if z==1:
											totaldegree=0
											for www in range(a):
												totaldegree+=L[a][www][www]
											if totaldegree//2<minnn:
												minedgesset=[]
												minnn=totaldegree//2
												print("New Minimum After This Following Round Is:",minnn)
											if totaldegree//2==minnn:
												newedges=[]
												for a1 in range(a):
													for a2 in range(a1+1,a):
														if L[a][a1][a2]<0:
															for a3 in range(abs(L[a][a1][a2])):
																newedges.append([a1+1,a2+1])
												minedgesset.append(newedges)
											print(totaldegree//2)
											print("Yes")
											print(L[a])
											print(is_planar_graph(newedges),b1,b2,av)
print(minnn)
partition_list = generate_partitions(14,14) # Something Like This Works To Eventually Execute Our Programme In Its Entirety Or Whatever
minedgesset=[]
minnn=20
for a in range(10,11):
	for minedges in minedgesset:
		draw_graph(minedges)
		print(minedges)
	yyyyy=0
	for edges in cv:
		print(a,yyyyy)
		yyyyy+=1
		# See If We Can Split This Dude Which Is A Set Of Edges In To Having a Dudes Total
		# By Ensuring Each Self Edge Must Have >=1 Dude Inside Of It
		# Other Than That Should Be Good To Go
		maxxx=0
		for edge in edges:
			maxxx=max(maxxx,edge[0])
			maxxx=max(maxxx,edge[1])
		for partition in partition_list[a-(maxxx+1)][len(edges)-1]: # Actually Represents A Partition In To len(edges) Parts
			for aa in range(a):
				for bb in range(a):
					L[a][aa][bb]=0 # Clear It Out For Reusage
			prev=maxxx+1 # Starting Point For Next Drop Of Vertices In To The Mix
			yyyy=1 # To Nullify Later On Self Edge Existence In Final Graph
			for aa in range(len(edges)):
				av=[edges[aa][0]]
				for bb in range(prev,prev+partition[aa]):
					av.append(bb)
				prev+=partition[aa]
				av.append(edges[aa][1])
				for w in range(len(av)-1):
					L[a][av[w]][av[w]]+=1
					L[a][av[w+1]][av[w+1]]+=1
					L[a][av[w]][av[w+1]]-=1
					L[a][av[w+1]][av[w]]-=1
					if av[w+1]==av[w]:
						yyyy=0
						break
				if yyyy==0:
					break
			if yyyy==1:
				lol=compute_resistances(L[a])
				for b1 in range(-1,a):
					for b2 in range(b1,a):
						if not (b1>=0 and b1==b2):
							numnegone=0
							if b1==-1:
								numnegone+=1
							if b2==-1:
								numnegone+=1
							if a+numnegone==10+2:
								av=[]
								z=1
								for a1 in range(a):
									for a2 in range(a1+1,a):
										if a1!=b1 and a2!=b1 and a1!=b2 and a2!=b2:
											av.append(lol[a1][a2])
								av.sort()
								for a1 in range(45-1):
									if av[a1+1]-av[a1]<0.00001:
										z=0
								for a1 in range(a):
									ccc=0
									for a2 in range(a):
										if L[a][a1][a2]!=0:
											ccc+=1
									if ccc<3:
										z=0
								if z==1:
									totaldegree=0
									for www in range(a):
										totaldegree+=L[a][www][www]
									if totaldegree//2<minnn:
										minedgesset=[]
										minnn=totaldegree//2
										print("New Minimum After This Following Round Is:",minnn)
									if totaldegree//2==minnn:
										newedges=[]
										for a1 in range(a):
											for a2 in range(a1+1,a):
												if L[a][a1][a2]<0:
													for a3 in range(abs(L[a][a1][a2])):
														newedges.append([a1+1,a2+1])
										minedgesset.append(newedges)
									print(totaldegree//2)
									print("Yes")
									print(L[a])
									print(b1,b2,av)
print(minnn)
for minedges in minedgesset:
	draw_graph(minedges)
	print(minedges)
minedgesset=[]
minnn=20
for a in range(14,15):
	yyyyy=0
	for edges in cv:
		print(a,yyyyy)
		yyyyy+=1
		# See If We Can Split This Dude Which Is A Set Of Edges In To Having a Dudes Total
		# By Ensuring Each Self Edge Must Have >=1 Dude Inside Of It
		# Other Than That Should Be Good To Go
		maxxx=0
		for edge in edges:
			maxxx=max(maxxx,edge[0])
			maxxx=max(maxxx,edge[1])
		for partition in partition_list[a-(maxxx+1)][len(edges)-1]: # Actually Represents A Partition In To len(edges) Parts
			for aa in range(a):
				for bb in range(a):
					L[a][aa][bb]=0 # Clear It Out For Reusage
			prev=maxxx+1 # Starting Point For Next Drop Of Vertices In To The Mix
			yyyy=1 # To Nullify Later On Self Edge Existence In Final Graph
			for aa in range(len(edges)):
				av=[edges[aa][0]]
				for bb in range(prev,prev+partition[aa]):
					av.append(bb)
				prev+=partition[aa]
				av.append(edges[aa][1])
				for w in range(len(av)-1):
					L[a][av[w]][av[w]]+=1
					L[a][av[w+1]][av[w+1]]+=1
					L[a][av[w]][av[w+1]]-=1
					L[a][av[w+1]][av[w]]-=1
					if av[w+1]==av[w]:
						yyyy=0
						break
				if yyyy==0:
					break
			if yyyy==1:
				lol=compute_resistances(L[a])
				for b1 in range(-1,a):
					for b2 in range(b1,a):
						if not (b1>=0 and b1==b2):
							numnegone=0
							if b1==-1:
								numnegone+=1
							if b2==-1:
								numnegone+=1
							if a+numnegone==12+2:
								av=[]
								z=1
								for a1 in range(a):
									for a2 in range(a1+1,a):
										if a1!=b1 and a2!=b1 and a1!=b2 and a2!=b2:
											av.append(lol[a1][a2])
								av.sort()
								for a1 in range(66-1):
									if av[a1+1]-av[a1]<0.00001:
										z=0
								for a1 in range(a):
									ccc=0
									for a2 in range(a):
										if L[a][a1][a2]!=0:
											ccc+=1
									if ccc<3:
										z=0
								if z==1:
									totaldegree=0
									for www in range(a):
										totaldegree+=L[a][www][www]
									if totaldegree//2<minnn:
										minedgesset=[]
										minnn=totaldegree//2
										print("New Minimum After This Following Round Is:",minnn)
									if totaldegree//2==minnn:
										newedges=[]
										for a1 in range(a):
											for a2 in range(a1+1,a):
												if L[a][a1][a2]<0:
													for a3 in range(abs(L[a][a1][a2])):
														newedges.append([a1+1,a2+1])
										minedgesset.append(newedges)
									print(totaldegree//2)
									print("Yes")
									print(L[a])
									print(b1,b2,av)
print(minnn)
for minedges in minedgesset:
	draw_graph(minedges)
	print(minedges)
# This Was Before Automation:
# An alleged solution below with 15 edges. I ought to verify later if desired.
#[[ 3  0 -1  0  0 -1  0  0 -1  0  0]
# [ 0  3  0  0 -1  0  0 -1  0  0 -1]
# [-1  0  3 -1  0 -1  0  0  0  0  0]
# [ 0  0 -1  3 -1  0  0  0 -1  0  0]
# [ 0 -1  0 -1  2  0  0  0  0  0  0]
# [-1  0 -1  0  0  3 -1  0  0  0  0]
# [ 0  0  0  0  0 -1  3 -1  0 -1  0]
# [ 0 -1  0  0  0  0 -1  2  0  0  0]
# [-1  0  0 -1  0  0  0  0  3 -1  0]
# [ 0  0  0  0  0  0 -1  0 -1  3 -1]
# [ 0 -1  0  0  0  0  0  0  0 -1  2]]
#1 [0.5385462555066074,0.5561674008810571,0.563876651982379,0.6167400881057268,0.6255506607929515,0.6387665198237882,0.6486784140969162,0.6740088105726876,0.7015418502202639,0.7268722466960356,0.7323788546255503,0.7588105726872244,0.7720264317180617,0.810572687224669,0.8248898678414097,0.8865638766519821,0.8986784140969166,0.9482378854625547,0.9515418502202639,0.9559471365638771,0.974669603524229,0.9823788546255503,1.0220264317180614,1.0407488986784141,1.0451541850220267,1.0572687224669601,1.1024229074889864,1.1596916299559472,1.1629955947136572,1.1729074889867843,1.1982378854625553,1.2169603524229071,1.229074889867842,1.2389867841409692,1.2555066079295156,1.268722466960353,1.269823788546256,1.291850220264317,1.2951541850220254,1.2962555066079295,1.357929515418502,1.387665198237886,1.3887665198237886,1.4096916299559472,1.4284140969163]
# Very fascinating how this exact example which I did identify in early eyeballing just so happens to come up later in a more precise setting uh because my initial setting does generalise fairly largely I would suppose.
L = np.array([
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0]
])
N = np.array([
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0]
])
M = np.array([
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0]
])
minn=100
print("Checking 11 Cycle With 3 Edges Added")
for aa in range(11):
	for bb in range(11):
		N[aa][bb]=0
for w in range(11):
	N[w][w]=2
	N[w][(w+1)%11]=-1
	N[w][(w-1)%11]=-1
for a in range(11):
	for b in range(a+1,11):
		for c in range(a,11):
			for d in range(c+1,11):
				for e in range(c,11):
					for f in range(e+1,11):
						N[a][a]+=1
						N[b][b]+=1
						N[c][c]+=1
						N[d][d]+=1
						N[e][e]+=1
						N[f][f]+=1
						N[a][b]-=1
						N[b][a]-=1
						N[c][d]-=1
						N[d][c]-=1
						N[e][f]-=1
						N[f][e]-=1
						lol=compute_resistances(N)
						for b1 in range(11):
							av=[]
							z=1
							for a1 in range(11):
								for a2 in range(a1+1,11):
									if a1!=b1 and a2!=b1:
										av.append(lol[a1][a2])
							av.sort()
							for a1 in range(45-1):
								if av[a1+1]-av[a1]<0.00001:
									z=0
							if z==1:
								print("Yes")
								print(N)
								print(b1,av)
						N[a][a]-=1
						N[b][b]-=1
						N[c][c]-=1
						N[d][d]-=1
						N[e][e]-=1
						N[f][f]-=1
						N[a][b]+=1
						N[b][a]+=1
						N[c][d]+=1
						N[d][c]+=1
						N[e][f]+=1
						N[f][e]+=1
print("Checking A K5 Of Paths On 11 Vertices With 2 Edges Off")
for x1 in range(7):
	for x2 in range(7-x1):
		for x3 in range(7-x1-x2):
			for x4 in range(7-x1-x2-x3):
				for x5 in range(7-x1-x2-x3-x4):
					for x6 in range(7-x1-x2-x3-x4-x5):
						for x7 in range(7-x1-x2-x3-x4-x5-x6):
							for aa in range(11):
								for bb in range(11):
									N[aa][bb]=0
							x8=6-x1-x2-x3-x4-x5-x6-x7
							# So x1 x2 x3 x4 x5 x6 x7 x8 Are Between Uh 0 1 2 3 4 In K5 Configuration Basically Except For No 01 Or 23 Path Initially
							av=[0]
							for w in range(5,5+x1):
								av.append(w)
							av.append(2)
							for w in range(len(av)-1):
								N[av[w]][av[w]]+=1
								N[av[w+1]][av[w+1]]+=1
								N[av[w]][av[w+1]]-=1
								N[av[w+1]][av[w]]-=1
							av=[0]
							for w in range(5+x1,5+x1+x2):
								av.append(w)
							av.append(3)
							for w in range(len(av)-1):
								N[av[w]][av[w]]+=1
								N[av[w+1]][av[w+1]]+=1
								N[av[w]][av[w+1]]-=1
								N[av[w+1]][av[w]]-=1
							av=[0]
							for w in range(5+x1+x2,5+x1+x2+x3):
								av.append(w)
							av.append(4)
							for w in range(len(av)-1):
								N[av[w]][av[w]]+=1
								N[av[w+1]][av[w+1]]+=1
								N[av[w]][av[w+1]]-=1
								N[av[w+1]][av[w]]-=1
							av=[1]
							for w in range(5+x1+x2+x3,5+x1+x2+x3+x4):
								av.append(w)
							av.append(2)
							for w in range(len(av)-1):
								N[av[w]][av[w]]+=1
								N[av[w+1]][av[w+1]]+=1
								N[av[w]][av[w+1]]-=1
								N[av[w+1]][av[w]]-=1
							av=[1]
							for w in range(5+x1+x2+x3+x4,5+x1+x2+x3+x4+x5):
								av.append(w)
							av.append(3)
							for w in range(len(av)-1):
								N[av[w]][av[w]]+=1
								N[av[w+1]][av[w+1]]+=1
								N[av[w]][av[w+1]]-=1
								N[av[w+1]][av[w]]-=1
							av=[1]
							for w in range(5+x1+x2+x3+x4+x5,5+x1+x2+x3+x4+x5+x6):
								av.append(w)
							av.append(4)
							for w in range(len(av)-1):
								N[av[w]][av[w]]+=1
								N[av[w+1]][av[w+1]]+=1
								N[av[w]][av[w+1]]-=1
								N[av[w+1]][av[w]]-=1
							av=[2]
							for w in range(5+x1+x2+x3+x4+x5+x6,5+x1+x2+x3+x4+x5+x6+x7):
								av.append(w)
							av.append(4)
							for w in range(len(av)-1):
								N[av[w]][av[w]]+=1
								N[av[w+1]][av[w+1]]+=1
								N[av[w]][av[w+1]]-=1
								N[av[w+1]][av[w]]-=1
							av=[3]
							for w in range(5+x1+x2+x3+x4+x5+x6+x7,5+x1+x2+x3+x4+x5+x6+x7+x8):
								av.append(w)
							av.append(4)
							for w in range(len(av)-1):
								N[av[w]][av[w]]+=1
								N[av[w+1]][av[w+1]]+=1
								N[av[w]][av[w+1]]-=1
								N[av[w+1]][av[w]]-=1
							#print(N)
							lol=compute_resistances(N)
							for b1 in range(11):
								av=[]
								z=1
								for a1 in range(11):
									for a2 in range(a1+1,11):
										if a1!=b1 and a2!=b1:
											av.append(lol[a1][a2])
								av.sort()
								for a1 in range(45-1):
									if av[a1+1]-av[a1]<0.00001:
										z=0
								if z==1:
									print("Yes")
									print(N)
									print(b1,av)
print("Checking A K5 Of Paths On 10 Vertices With 2 Edges Off And Then 1 Added In")
for x1 in range(6):
	for x2 in range(6-x1):
		for x3 in range(6-x1-x2):
			for x4 in range(6-x1-x2-x3):
				for x5 in range(6-x1-x2-x3-x4):
					for x6 in range(6-x1-x2-x3-x4-x5):
						for x7 in range(6-x1-x2-x3-x4-x5-x6):
							for aa in range(10):
								for bb in range(10):
									L[aa][bb]=0
							x8=5-x1-x2-x3-x4-x5-x6-x7
							# So x1 x2 x3 x4 x5 x6 x7 x8 Are Between Uh 0 1 2 3 4 In K5 Configuration Basically Except For No 01 Or 23 Path Initially
							av=[0]
							for w in range(5,5+x1):
								av.append(w)
							av.append(2)
							for w in range(len(av)-1):
								L[av[w]][av[w]]+=1
								L[av[w+1]][av[w+1]]+=1
								L[av[w]][av[w+1]]-=1
								L[av[w+1]][av[w]]-=1
							av=[0]
							for w in range(5+x1,5+x1+x2):
								av.append(w)
							av.append(3)
							for w in range(len(av)-1):
								L[av[w]][av[w]]+=1
								L[av[w+1]][av[w+1]]+=1
								L[av[w]][av[w+1]]-=1
								L[av[w+1]][av[w]]-=1
							av=[0]
							for w in range(5+x1+x2,5+x1+x2+x3):
								av.append(w)
							av.append(4)
							for w in range(len(av)-1):
								L[av[w]][av[w]]+=1
								L[av[w+1]][av[w+1]]+=1
								L[av[w]][av[w+1]]-=1
								L[av[w+1]][av[w]]-=1
							av=[1]
							for w in range(5+x1+x2+x3,5+x1+x2+x3+x4):
								av.append(w)
							av.append(2)
							for w in range(len(av)-1):
								L[av[w]][av[w]]+=1
								L[av[w+1]][av[w+1]]+=1
								L[av[w]][av[w+1]]-=1
								L[av[w+1]][av[w]]-=1
							av=[1]
							for w in range(5+x1+x2+x3+x4,5+x1+x2+x3+x4+x5):
								av.append(w)
							av.append(3)
							for w in range(len(av)-1):
								L[av[w]][av[w]]+=1
								L[av[w+1]][av[w+1]]+=1
								L[av[w]][av[w+1]]-=1
								L[av[w+1]][av[w]]-=1
							av=[1]
							for w in range(5+x1+x2+x3+x4+x5,5+x1+x2+x3+x4+x5+x6):
								av.append(w)
							av.append(4)
							for w in range(len(av)-1):
								L[av[w]][av[w]]+=1
								L[av[w+1]][av[w+1]]+=1
								L[av[w]][av[w+1]]-=1
								L[av[w+1]][av[w]]-=1
							av=[2]
							for w in range(5+x1+x2+x3+x4+x5+x6,5+x1+x2+x3+x4+x5+x6+x7):
								av.append(w)
							av.append(4)
							for w in range(len(av)-1):
								L[av[w]][av[w]]+=1
								L[av[w+1]][av[w+1]]+=1
								L[av[w]][av[w+1]]-=1
								L[av[w+1]][av[w]]-=1
							av=[3]
							for w in range(5+x1+x2+x3+x4+x5+x6+x7,5+x1+x2+x3+x4+x5+x6+x7+x8):
								av.append(w)
							av.append(4)
							for w in range(len(av)-1):
								L[av[w]][av[w]]+=1
								L[av[w+1]][av[w+1]]+=1
								L[av[w]][av[w+1]]-=1
								L[av[w+1]][av[w]]-=1
							#print(L)
							lol=compute_resistances(L)
							av=[]
							z=1
							for a1 in range(10):
								for a2 in range(a1+1,10):
									av.append(lol[a1][a2])
							av.sort()
							#print(av)
							for a1 in range(45-1):
								if av[a1+1]-av[a1]<0.00001:
									z=0
							if z==1:
								print("Yes")
								print(L)	
								print(av)
							for a in range(10):
								for b in range(a+1,10):
									for c in range(a,10):
										for d in range(c+1,10):
											for e in range(1):
												for f in range(1):
													L[a][a]+=1
													L[b][b]+=1
													L[c][c]+=1
													L[d][d]+=1
													L[e][e]+=1
													L[f][f]+=1
													L[a][b]-=1
													L[b][a]-=1
													L[c][d]-=1
													L[d][c]-=1
													L[e][f]-=1
													L[f][e]-=1
													lol=compute_resistances(L)
													av=[]
													z=1
													for a1 in range(10):
														for a2 in range(a1+1,10):
															av.append(lol[a1][a2])
													av.sort()
													for a1 in range(45-1):
														if av[a1+1]-av[a1]<0.00001:
															z=0
													if z==1:
														print("Yes")
														print(L)	
														print(av)
													L[a][a]-=1
													L[b][b]-=1
													L[c][c]-=1
													L[d][d]-=1
													L[e][e]-=1
													L[f][f]-=1
													L[a][b]+=1
													L[b][a]+=1
													L[c][d]+=1
													L[d][c]+=1
													L[e][f]+=1
													L[f][e]+=1
print("Checking A K4 Of Paths On 11 Vertices With 1 Extra Edge Added In")
for x1 in range(8):
	for x2 in range(8-x1):
		for x3 in range(8-x1-x2):
			for x4 in range(8-x1-x2-x3):
				for x5 in range(8-x1-x2-x3-x4):
					for aa in range(11):
						for bb in range(11):
							N[aa][bb]=0
					x6=7-x1-x2-x3-x4-x5
					# So x1 x2 x3 x4 x5 x6 Are Between Uh 0 1 2 3 In K4 Configuration Basically
					av=[0]
					for w in range(4,4+x1):
						av.append(w)
					av.append(1)
					for w in range(len(av)-1):
						N[av[w]][av[w]]+=1
						N[av[w+1]][av[w+1]]+=1
						N[av[w]][av[w+1]]-=1
						N[av[w+1]][av[w]]-=1
					av=[0]
					for w in range(4+x1,4+x1+x2):
						av.append(w)
					av.append(2)
					for w in range(len(av)-1):
						N[av[w]][av[w]]+=1
						N[av[w+1]][av[w+1]]+=1
						N[av[w]][av[w+1]]-=1
						N[av[w+1]][av[w]]-=1
					av=[0]
					for w in range(4+x1+x2,4+x1+x2+x3):
						av.append(w)
					av.append(3)
					for w in range(len(av)-1):
						N[av[w]][av[w]]+=1
						N[av[w+1]][av[w+1]]+=1
						N[av[w]][av[w+1]]-=1
						N[av[w+1]][av[w]]-=1
					av=[1]
					for w in range(4+x1+x2+x3,4+x1+x2+x3+x4):
						av.append(w)
					av.append(2)
					for w in range(len(av)-1):
						N[av[w]][av[w]]+=1
						N[av[w+1]][av[w+1]]+=1
						N[av[w]][av[w+1]]-=1
						N[av[w+1]][av[w]]-=1
					av=[1]
					for w in range(4+x1+x2+x3+x4,4+x1+x2+x3+x4+x5):
						av.append(w)
					av.append(3)
					for w in range(len(av)-1):
						N[av[w]][av[w]]+=1
						N[av[w+1]][av[w+1]]+=1
						N[av[w]][av[w+1]]-=1
						N[av[w+1]][av[w]]-=1
					av=[2]
					for w in range(4+x1+x2+x3+x4+x5,4+x1+x2+x3+x4+x5+x6):
						av.append(w)
					av.append(3)
					for w in range(len(av)-1):
						N[av[w]][av[w]]+=1
						N[av[w+1]][av[w+1]]+=1
						N[av[w]][av[w+1]]-=1
						N[av[w+1]][av[w]]-=1
					#print(L)
					lol=compute_resistances(N)
					for b1 in range(11):
						av=[]
						z=1
						for a1 in range(11):
							for a2 in range(a1+1,11):
								if a1!=b1 and a2!=b1:
									av.append(lol[a1][a2])
						av.sort()
						for a1 in range(45-1):
							if av[a1+1]-av[a1]<0.00001:
								z=0
						if z==1:
							print("Yes")
							print(N)
							print(b1,av)
					for a in range(11):
						for b in range(a+1,11):
							for c in range(1):
								for d in range(1):
									for e in range(1):
										for f in range(1):
											N[a][a]+=1
											N[b][b]+=1
											N[c][c]+=1
											N[d][d]+=1
											N[e][e]+=1
											N[f][f]+=1
											N[a][b]-=1
											N[b][a]-=1
											N[c][d]-=1
											N[d][c]-=1
											N[e][f]-=1
											N[f][e]-=1
											lol=compute_resistances(N)
											for b1 in range(11):
												av=[]
												z=1
												for a1 in range(11):
													for a2 in range(a1+1,11):
														if a1!=b1 and a2!=b1:
															av.append(lol[a1][a2])
												av.sort()
												for a1 in range(45-1):
													if av[a1+1]-av[a1]<0.00001:
														z=0
												if z==1:
													print("Yes")
													print(N)
													print(b1,av)
											N[a][a]-=1
											N[b][b]-=1
											N[c][c]-=1
											N[d][d]-=1
											N[e][e]-=1
											N[f][f]-=1
											N[a][b]+=1
											N[b][a]+=1
											N[c][d]+=1
											N[d][c]+=1
											N[e][f]+=1
											N[f][e]+=1
print("Checking A K4 Of Paths On 10 Vertices")
for x1 in range(7):
	for x2 in range(7-x1):
		for x3 in range(7-x1-x2):
			for x4 in range(7-x1-x2-x3):
				for x5 in range(7-x1-x2-x3-x4):
					for aa in range(10):
						for bb in range(10):
							L[aa][bb]=0
					x6=6-x1-x2-x3-x4-x5
					# So x1 x2 x3 x4 x5 x6 Are Between Uh 0 1 2 3 In K4 Configuration Basically
					av=[0]
					for w in range(4,4+x1):
						av.append(w)
					av.append(1)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					av=[0]
					for w in range(4+x1,4+x1+x2):
						av.append(w)
					av.append(2)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					av=[0]
					for w in range(4+x1+x2,4+x1+x2+x3):
						av.append(w)
					av.append(3)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					av=[1]
					for w in range(4+x1+x2+x3,4+x1+x2+x3+x4):
						av.append(w)
					av.append(2)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					av=[1]
					for w in range(4+x1+x2+x3+x4,4+x1+x2+x3+x4+x5):
						av.append(w)
					av.append(3)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					av=[2]
					for w in range(4+x1+x2+x3+x4+x5,4+x1+x2+x3+x4+x5+x6):
						av.append(w)
					av.append(3)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					#print(L)
					lol=compute_resistances(L)
					av=[]
					z=1
					for a1 in range(10):
						for a2 in range(a1+1,10):
							av.append(lol[a1][a2])
					av.sort()
					#print(av)
					for a1 in range(45-1):
						if av[a1+1]-av[a1]<0.00001:
							z=0
					if z==1:
						print("Yes")
						print(L)	
						print(av)
					for a in range(10):
						for b in range(a+1,10):
							for c in range(a,10):
								for d in range(c+1,10):
									for e in range(1):
										for f in range(1):
											L[a][a]+=1
											L[b][b]+=1
											L[c][c]+=1
											L[d][d]+=1
											L[e][e]+=1
											L[f][f]+=1
											L[a][b]-=1
											L[b][a]-=1
											L[c][d]-=1
											L[d][c]-=1
											L[e][f]-=1
											L[f][e]-=1
											lol=compute_resistances(L)
											av=[]
											z=1
											for a1 in range(10):
												for a2 in range(a1+1,10):
													av.append(lol[a1][a2])
											av.sort()
											for a1 in range(45-1):
												if av[a1+1]-av[a1]<0.00001:
													z=0
											if z==1:
												print("Yes")
												print(L)	
												print(av)
											L[a][a]-=1
											L[b][b]-=1
											L[c][c]-=1
											L[d][d]-=1
											L[e][e]-=1
											L[f][f]-=1
											L[a][b]+=1
											L[b][a]+=1
											L[c][d]+=1
											L[d][c]+=1
											L[e][f]+=1
											L[f][e]+=1
print("Checking 10 Cycle With 3 Edges Added")
for aa in range(10):
	for bb in range(10):
		L[aa][bb]=0
for w in range(10):
	L[w][w]=2
	L[w][(w+1)%10]=-1
	L[w][(w-1)%10]=-1
for a in range(10):
	for b in range(a+1,10):
		for c in range(a,10):
			for d in range(c+1,10):
				for e in range(c,10):
					for f in range(e+1,10):
						L[a][a]+=1
						L[b][b]+=1
						L[c][c]+=1
						L[d][d]+=1
						L[e][e]+=1
						L[f][f]+=1
						L[a][b]-=1
						L[b][a]-=1
						L[c][d]-=1
						L[d][c]-=1
						L[e][f]-=1
						L[f][e]-=1
						lol=compute_resistances(L)
						av=[]
						z=1
						for a1 in range(10):
							for a2 in range(a1+1,10):
								av.append(lol[a1][a2])
						av.sort()
						for a1 in range(45-1):
							if av[a1+1]-av[a1]<0.00001:
								z=0
						if z==1:
							print("Yes")
							print(L)
							print(av)
						L[a][a]-=1
						L[b][b]-=1
						L[c][c]-=1
						L[d][d]-=1
						L[e][e]-=1
						L[f][f]-=1
						L[a][b]+=1
						L[b][a]+=1
						L[c][d]+=1
						L[d][c]+=1
						L[e][f]+=1
						L[f][e]+=1
print("Checking 10 Cycle With 4 Edges Added")
for aa in range(10):
	for bb in range(10):
		L[aa][bb]=0
for w in range(10):
	L[w][w]=2
	L[w][(w+1)%10]=-1
	L[w][(w-1)%10]=-1
for a in range(10):
	for b in range(a+1,10):
		for c in range(a,10):
			for d in range(c+1,10):
				for e in range(c,10):
					for f in range(e+1,10):
						for g in range(e,10):
							for h in range(g+1,10):
								L[a][a]+=1
								L[b][b]+=1
								L[c][c]+=1
								L[d][d]+=1
								L[e][e]+=1
								L[f][f]+=1
								L[g][g]+=1
								L[h][h]+=1
								L[a][b]-=1
								L[b][a]-=1
								L[c][d]-=1
								L[d][c]-=1
								L[e][f]-=1
								L[f][e]-=1
								L[g][h]-=1
								L[h][g]-=1
								lol=compute_resistances(L)
								av=[]
								z=1
								for a1 in range(10):
									for a2 in range(a1+1,10):
										av.append(lol[a1][a2])
								av.sort()
								for a1 in range(45-1):
									if av[a1+1]-av[a1]<0.00001:
										z=0
								if z==1:
									print("Yes")
									print(L)
									print(av)
								L[a][a]-=1
								L[b][b]-=1
								L[c][c]-=1
								L[d][d]-=1
								L[e][e]-=1
								L[f][f]-=1
								L[g][g]-=1
								L[h][h]-=1
								L[a][b]+=1
								L[b][a]+=1
								L[c][d]+=1
								L[d][c]+=1
								L[e][f]+=1
								L[f][e]+=1
								L[g][h]+=1
								L[h][g]+=1
print("Checking 11 Cycle With 2 Edges Added")
for aa in range(11):
	for bb in range(11):
		N[aa][bb]=0
for w in range(11):
	N[w][w]=2
	N[w][(w+1)%11]=-1
	N[w][(w-1)%11]=-1
for a in range(11):
	for b in range(a+1,11):
		for c in range(a,11):
			for d in range(c+1,11):
				for e in range(1):
					for f in range(1):
						N[a][a]+=1
						N[b][b]+=1
						N[c][c]+=1
						N[d][d]+=1
						N[e][e]+=1
						N[f][f]+=1
						N[a][b]-=1
						N[b][a]-=1
						N[c][d]-=1
						N[d][c]-=1
						N[e][f]-=1
						N[f][e]-=1
						lol=compute_resistances(N)
						for b1 in range(11):
							av=[]
							z=1
							for a1 in range(11):
								for a2 in range(a1+1,11):
									if a1!=b1 and a2!=b1:
										av.append(lol[a1][a2])
							av.sort()
							for a1 in range(45-1):
								if av[a1+1]-av[a1]<0.00001:
									z=0
							if z==1:
								print("Yes")
								print(N)
								print(b1,av)
						N[a][a]-=1
						N[b][b]-=1
						N[c][c]-=1
						N[d][d]-=1
						N[e][e]-=1
						N[f][f]-=1
						N[a][b]+=1
						N[b][a]+=1
						N[c][d]+=1
						N[d][c]+=1
						N[e][f]+=1
						N[f][e]+=1
# Checking 11 Broken In To 2 Cycles With 2 Edges Added
print("Checking 11 With 3 Paths And 1 Added Edge")
# Checking 11 With 3 Paths And 3 Added Edges Finally Deduced Alleged Solutions With 15 Edges Exist
for x in range(10):
	for y in range(min(x+1,9-x)):
		if y>=9-x-y:
			for aa in range(11):
				for bb in range(11):
					N[aa][bb]=0
			av=[0]
			for w in range(2,2+x):
				av.append(w)
			av.append(1)
			for w in range(len(av)-1):
				N[av[w]][av[w]]+=1
				N[av[w+1]][av[w+1]]+=1
				N[av[w]][av[w+1]]-=1
				N[av[w+1]][av[w]]-=1
			av=[0]
			for w in range(2+x,2+x+y):
				av.append(w)
			av.append(1)
			for w in range(len(av)-1):
				N[av[w]][av[w]]+=1
				N[av[w+1]][av[w+1]]+=1
				N[av[w]][av[w+1]]-=1
				N[av[w+1]][av[w]]-=1
			av=[0]
			for w in range(2+x+y,11):
				av.append(w)
			av.append(1)
			for w in range(len(av)-1):
				N[av[w]][av[w]]+=1
				N[av[w+1]][av[w+1]]+=1
				N[av[w]][av[w+1]]-=1
				N[av[w+1]][av[w]]-=1
			#print(N)
			for a in range(11):
				for b in range(a+1,11):
					for c in range(1):
						for d in range(1):
							for e in range(c,11):
								for f in range(e+1,11):
									N[a][a]+=1
									N[b][b]+=1
									N[c][c]+=1
									N[d][d]+=1
									N[e][e]+=1
									N[f][f]+=1
									N[a][b]-=1
									N[b][a]-=1
									N[c][d]-=1
									N[d][c]-=1
									N[e][f]-=1
									N[f][e]-=1
									#print(N)
									lol=compute_resistances(N)
									for b1 in range(11):
										av=[]
										z=1
										for a1 in range(11):
											for a2 in range(a1+1,11):
												if a1!=b1 and a2!=b1:
													av.append(lol[a1][a2])
										av.sort()
										for a1 in range(45-1):
											if av[a1+1]-av[a1]<0.00001:
												z=0
										if z==1:
											print("Yes")
											print(N)
											print(b1,av)
									N[a][a]-=1
									N[b][b]-=1
									N[c][c]-=1
									N[d][d]-=1
									N[e][e]-=1
									N[f][f]-=1
									N[a][b]+=1
									N[b][a]+=1
									N[c][d]+=1
									N[d][c]+=1
									N[e][f]+=1
									N[f][e]+=1
print("Checking 11 With 3 Paths And 2 Added Edges") # Solution Found Here
for x in range(10):
	for y in range(min(x+1,9-x)):
		if y>=9-x-y:
			for aa in range(11):
				for bb in range(11):
					N[aa][bb]=0
			av=[0]
			for w in range(2,2+x):
				av.append(w)
			av.append(1)
			for w in range(len(av)-1):
				N[av[w]][av[w]]+=1
				N[av[w+1]][av[w+1]]+=1
				N[av[w]][av[w+1]]-=1
				N[av[w+1]][av[w]]-=1
			av=[0]
			for w in range(2+x,2+x+y):
				av.append(w)
			av.append(1)
			for w in range(len(av)-1):
				N[av[w]][av[w]]+=1
				N[av[w+1]][av[w+1]]+=1
				N[av[w]][av[w+1]]-=1
				N[av[w+1]][av[w]]-=1
			av=[0]
			for w in range(2+x+y,11):
				av.append(w)
			av.append(1)
			for w in range(len(av)-1):
				N[av[w]][av[w]]+=1
				N[av[w+1]][av[w+1]]+=1
				N[av[w]][av[w+1]]-=1
				N[av[w+1]][av[w]]-=1
			#print(N)
			for a in range(11):
				for b in range(a+1,11):
					for c in range(a,11):
						for d in range(c+1,11):
							for e in range(c,11):
								for f in range(e+1,11):
									N[a][a]+=1
									N[b][b]+=1
									N[c][c]+=1
									N[d][d]+=1
									N[e][e]+=1
									N[f][f]+=1
									N[a][b]-=1
									N[b][a]-=1
									N[c][d]-=1
									N[d][c]-=1
									N[e][f]-=1
									N[f][e]-=1
									#print(N)
									lol=compute_resistances(N)
									for b1 in range(11):
										av=[]
										z=1
										for a1 in range(11):
											for a2 in range(a1+1,11):
												if a1!=b1 and a2!=b1:
													av.append(lol[a1][a2])
										av.sort()
										for a1 in range(45-1):
											if av[a1+1]-av[a1]<0.00001:
												z=0
										if z==1:
											print("Yes")
											print(N)
											print(b1,av)
									N[a][a]-=1
									N[b][b]-=1
									N[c][c]-=1
									N[d][d]-=1
									N[e][e]-=1
									N[f][f]-=1
									N[a][b]+=1
									N[b][a]+=1
									N[c][d]+=1
									N[d][c]+=1
									N[e][f]+=1
									N[f][e]+=1
print("Checking 2 Vertices With 3 Paths")
for x in range(9):
	for y in range(9-x):
		# x Points On Leftmost Path And y On Middle Path And 8-(x+y) On Rightmost
		for aa in range(10):
			for bb in range(10):
				L[aa][bb]=0
		av=[0]
		for w in range(2,2+x):
			av.append(w)
		av.append(1)
		for w in range(len(av)-1):
			L[av[w]][av[w]]+=1
			L[av[w+1]][av[w+1]]+=1
			L[av[w]][av[w+1]]-=1
			L[av[w+1]][av[w]]-=1
		av=[0]
		for w in range(2+x,2+x+y):
			av.append(w)
		av.append(1)
		for w in range(len(av)-1):
			L[av[w]][av[w]]+=1
			L[av[w+1]][av[w+1]]+=1
			L[av[w]][av[w+1]]-=1
			L[av[w+1]][av[w]]-=1
		av=[0]
		for w in range(2+x+y,10):
			av.append(w)
		av.append(1)
		for w in range(len(av)-1):
			L[av[w]][av[w]]+=1
			L[av[w+1]][av[w+1]]+=1
			L[av[w]][av[w+1]]-=1
			L[av[w+1]][av[w]]-=1
		#print(L)
		for a in range(10):
			for b in range(a+1,10):
				for c in range(10):
					for d in range(c+1,10):
						for e in range(10):
							for f in range(e+1,10):
								L[a][a]+=1
								L[b][b]+=1
								L[c][c]+=1
								L[d][d]+=1
								L[e][e]+=1
								L[f][f]+=1
								L[a][b]-=1
								L[b][a]-=1
								L[c][d]-=1
								L[d][c]-=1
								L[e][f]-=1
								L[f][e]-=1
								lol=compute_resistances(L)
								av=[]
								z=1
								for a1 in range(10):
									for a2 in range(a1+1,10):
										av.append(lol[a1][a2])
								av.sort()
								for a1 in range(45-1):
									if av[a1+1]-av[a1]<0.00001:
										z+=1
								if z==1:
									print("Yes")
									print(L)	
									print(av)
								elif z<minn:
									print(z)
									minn=z
								L[a][a]-=1
								L[b][b]-=1
								L[c][c]-=1
								L[d][d]-=1
								L[e][e]-=1
								L[f][f]-=1
								L[a][b]+=1
								L[b][a]+=1
								L[c][d]+=1
								L[d][c]+=1
								L[e][f]+=1
								L[f][e]+=1
print("Checking A K4 Of Paths")
for x1 in range(7):
	for x2 in range(7-x1):
		for x3 in range(7-x1-x2):
			for x4 in range(7-x1-x2-x3):
				for x5 in range(7-x1-x2-x3-x4):
					for aa in range(10):
						for bb in range(10):
							L[aa][bb]=0
					x6=6-x1-x2-x3-x4-x5
					# So x1 x2 x3 x4 x5 x6 Are Between Uh 0 1 2 3 In K4 Configuration Basically
					av=[0]
					for w in range(4,4+x1):
						av.append(w)
					av.append(1)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					av=[0]
					for w in range(4+x1,4+x1+x2):
						av.append(w)
					av.append(2)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					av=[0]
					for w in range(4+x1+x2,4+x1+x2+x3):
						av.append(w)
					av.append(3)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					av=[1]
					for w in range(4+x1+x2+x3,4+x1+x2+x3+x4):
						av.append(w)
					av.append(2)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					av=[1]
					for w in range(4+x1+x2+x3+x4,4+x1+x2+x3+x4+x5):
						av.append(w)
					av.append(3)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					av=[2]
					for w in range(4+x1+x2+x3+x4+x5,4+x1+x2+x3+x4+x5+x6):
						av.append(w)
					av.append(3)
					for w in range(len(av)-1):
						L[av[w]][av[w]]+=1
						L[av[w+1]][av[w+1]]+=1
						L[av[w]][av[w+1]]-=1
						L[av[w+1]][av[w]]-=1
					#print(L)
					lol=compute_resistances(L)
					av=[]
					z=1
					for a1 in range(10):
						for a2 in range(a1+1,10):
							av.append(lol[a1][a2])
					av.sort()
					#print(av)
					for a1 in range(45-1):
						if av[a1+1]-av[a1]<0.00001:
							z=0
					if z==1:
						print("Yes")
						print(L)	
						print(av)
					for a in range(10):
						for b in range(a+1,10):
							for c in range(10):
								for d in range(c+1,10):
									for e in range(1):
										for f in range(1):
											L[a][a]+=1
											L[b][b]+=1
											L[c][c]+=1
											L[d][d]+=1
											L[e][e]+=1
											L[f][f]+=1
											L[a][b]-=1
											L[b][a]-=1
											L[c][d]-=1
											L[d][c]-=1
											L[e][f]-=1
											L[f][e]-=1
											lol=compute_resistances(L)
											av=[]
											z=1
											for a1 in range(10):
												for a2 in range(a1+1,10):
													av.append(lol[a1][a2])
											av.sort()
											for a1 in range(45-1):
												if av[a1+1]-av[a1]<0.00001:
													z=0
											if z==1:
												print("Yes")
												print(L)	
												print(av)
											L[a][a]-=1
											L[b][b]-=1
											L[c][c]-=1
											L[d][d]-=1
											L[e][e]-=1
											L[f][f]-=1
											L[a][b]+=1
											L[b][a]+=1
											L[c][d]+=1
											L[d][c]+=1
											L[e][f]+=1
											L[f][e]+=1