Worth exploring. Radically high upside. Worth exploring various concrete cases and seeing where ~2/3 gets realised might help gain intuition on any sort of auxiliary functions to define or intuitions. I certainly ought to read up more on permutations and that Xiaoyu He Noga Alon task on the 2000n^2 and log log n factor and all of that parsing through combinatorics again think about Dynamic Programming and the usual read read read up more maybe get inspired to work there on pattern avoidance and so on and so on. Honestly that paper Generation Of Acyclic Biological Diagrams by Panayotopoulos appeared on my monitour and got me thinking about other routes for that task like uh maybe uh if we consider a family of permutations say the family is like freely permute the first n, 2nd n, ..., 2000th n block uh and all of those (n!)^2000 permutations are in the family uh... maybe we find that something like [n-1]/n of the families will have [n-1]/n of the permutations work or something. OKOKOK maybe instead we are allowed to permute the dudes who are identical modulo n in indices and then uh... or modulo 2000 maybe uh... then try in each group just permuting according to the desired permutation ordering ugh... somehow trying to induce all ugh... distance function ugh... for that task. I ought to read some ArXiV posts connecting with Mihir Singhal's bibliography etc. etc. continue to ArXiV trawl more if I hope to get a Combinatorics paper.

So for example here it certainly ought to simply be noted that if we knew more about prefixes and basically had something like say we find some asymptotic where ~1 permutations of some length have some prefix of a uh length length - c of a full dude occuring in the first 10000n^2 or something then the expected value of the number of other dudes needed to be appended to the end to complete that particular full dude is maybe bounded by uh some canonical expected value argumentation so essentially even a 2 state chain might work to give some bound like we find some length and then from there just do not worry about other dudes.

OKOKOK so this would start to come in to another lemma by the way basically which is that if we frame the problem in terms of basically just simulating a sequence of random uniform draws from [0, 1] until inducing the desired permutations or their substrings we then have some task sort of kind of like uh... maybe we can show it isomorphs then in to some instance still of like a probability ~1 of those dudes will have some uh like uh what is the expected value of 1/[interval length] for random uniform points in [0, 1] so uh... moments and note the expected value of the length of the shortest segment is around ~1/n^2 but the uh perhaps one can compute these quantities via ORDER STATISTICS ON THE SPACINGS BETWEEN ORDER STATISTICS FOR THE UNIFORM DISTRIBUTION - IOSIF PINELIS etc. etc. anyways the point is that quantity needs to be like uh reasonable enough uh errrm uh... well actually uh we can do this task differently now we are working out more details here ugh ugh ugh really could be uh like more like uh... oh if it is O[1/n] then it follows as the overall lengths of the prefixes might be O[n^2] leading to O[1/n^2] gaps for O[c*n^2] auxiliary expectation for phase 2 step of the process described here.

Now the actual expected value of 1/[interval length] is more like integral from 0  to 1 of (1/x)*n*(1-x)^(n-1) dx which does not converge but perhaps if we can say with high enough probability to ~1 that the minimum interval has size >~something like 1/n^4 we might get needed bounds.

Not sure a strategy like this is so good uh setting up some partial set of those prefixes or whatever and then reasoning about the expected value of terms needed to hit 1 of those prefixes followed up by the 2nd phase of just waiting until we complete that particular 1st struck prefix.